name: Deploy SIRTIS to Supabase

on:
  # SAFETY: Removed automatic push triggers to prevent accidental data loss
  # Only manual deployments are allowed to protect production data
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: 'false'
      skip_seed:
        description: 'Skip database seeding (recommended for production)'
        required: false
        default: 'true'

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run build test
        run: npm run build

  deploy-supabase:
    name: Deploy to Supabase
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: supabase-production
      url: https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase connection
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "üîç Verifying Supabase connection..."
          supabase projects list

      - name: Deploy database migrations
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.SUPABASE_DIRECT_URL }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "üöÄ Starting Supabase database deployment..."
          chmod +x scripts/deploy-supabase.sh
          ./scripts/deploy-supabase.sh

      - name: Deploy Supabase functions (if any)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          if [ -d "supabase/functions" ]; then
            echo "üì¶ Deploying Supabase Edge Functions..."
            supabase functions deploy --project-ref $SUPABASE_PROJECT_ID
          else
            echo "‚ÑπÔ∏è  No Supabase functions to deploy"
          fi

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Supabase deployment completed successfully!"
            echo "üåê Database URL: https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co"
          else
            echo "‚ùå Supabase deployment failed!"
          fi

  notify:
    name: Notify Deployment Status
    needs: [test, deploy-supabase]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Success Notification
        if: needs.deploy-supabase.result == 'success'
        run: |
          echo "üéâ SIRTIS Supabase Deployment Successful!"
          echo "‚úÖ Database migrations applied"
          echo "‚úÖ All tests passed"
          echo "üåê Application ready at Supabase"

      - name: Deployment Failure Notification
        if: needs.deploy-supabase.result == 'failure'
        run: |
          echo "‚ùå SIRTIS Supabase Deployment Failed!"
          echo "Please check the deployment logs for details"
          exit 1
