'use client'

import React, { useState, useEffect } from 'react'
import { Wifi, WifiOff, Users, Bell, MessageSquare, Activity, Eye, Clock, CheckCircle } from 'lucide-react'

// Mock hooks for build compatibility
const useRealTime = () => ({ 
  isConnected: false, 
  connectionStatus: 'disconnected',
  emit: () => {},
  subscribe: () => () => {}
})
const useRealTimeNotifications = () => ({ 
  notifications: [], 
  markAsRead: () => {} 
})
const useUserPresence = (userId?: string) => ({ 
  onlineUsers: [] 
})

interface RealTimeStatusIndicatorProps {
  className?: string
}

export function RealTimeStatusIndicator({ className = '' }: RealTimeStatusIndicatorProps) {
  const { isConnected, connectionStatus } = useRealTime()

  const getStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return 'text-green-500'
      case 'connecting': return 'text-yellow-500'
      case 'disconnected': return 'text-gray-500'
      case 'error': return 'text-red-500'
      default: return 'text-gray-500'
    }
  }

  const getStatusIcon = () => {
    if (isConnected) {
      return <Wifi className="w-4 h-4" />
    }
    return <WifiOff className="w-4 h-4" />
  }

  return (
    <div className={`flex items-center space-x-2 ${className}`}>
      <div className={`${getStatusColor()}`}>
        {getStatusIcon()}
      </div>
      <span className={`text-sm ${getStatusColor()}`}>
        {connectionStatus.charAt(0).toUpperCase() + connectionStatus.slice(1)}
      </span>
    </div>
  )
}

interface LiveNotificationsProps {
  className?: string
}

export function LiveNotifications({ className = '' }: LiveNotificationsProps) {
  const { notifications, markAsRead } = useRealTimeNotifications()
  const [showNotifications, setShowNotifications] = useState(false)

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'task': return <CheckCircle className="w-4 h-4 text-blue-500" />
      case 'message': return <MessageSquare className="w-4 h-4 text-green-500" />
      case 'alert': return <Bell className="w-4 h-4 text-red-500" />
      default: return <Bell className="w-4 h-4 text-gray-500" />
    }
  }

  const formatTime = (timestamp: Date) => {
    return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }

  return (
    <div className={`relative ${className}`}>
      <button
        onClick={() => setShowNotifications(!showNotifications)}
        className="relative p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
      >
        <Bell className="w-5 h-5 text-gray-600 dark:text-gray-400" />
        {notifications.length > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
            {notifications.length > 9 ? '9+' : notifications.length}
          </span>
        )}
      </button>

      {showNotifications && (
        <div className="absolute right-0 top-full mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="font-semibold text-gray-900 dark:text-gray-100">Live Notifications</h3>
          </div>
          
          <div className="max-h-96 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                No new notifications
              </div>
            ) : (
              <div className="divide-y divide-gray-200 dark:divide-gray-700">
                {notifications.map((notification, index) => (
                  <div key={index} className="p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                    <div className="flex items-start space-x-3">
                      {getNotificationIcon(notification.type)}
                      <div className="flex-1 min-w-0">
                        <p className="text-sm text-gray-900 dark:text-gray-100">
                          {notification.message}
                        </p>
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {formatTime(notification.timestamp)}
                        </p>
                      </div>
                      <button
                        onClick={() => markAsRead(index)}
                        className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                      >
                        Ã—
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

interface UserPresenceIndicatorProps {
  roomId?: string
  className?: string
}

export function UserPresenceIndicator({ roomId, className = '' }: UserPresenceIndicatorProps) {
  const { onlineUsers } = useUserPresence(roomId)

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'bg-green-500'
      case 'away': return 'bg-yellow-500'
      case 'busy': return 'bg-red-500'
      default: return 'bg-gray-500'
    }
  }

  return (
    <div className={`flex items-center space-x-3 ${className}`}>
      <div className="flex items-center space-x-2">
        <Users className="w-4 h-4 text-gray-600 dark:text-gray-400" />
        <span className="text-sm text-gray-600 dark:text-gray-400">
          {onlineUsers.length} online
        </span>
      </div>
      
      <div className="flex items-center space-x-1">
        {onlineUsers.slice(0, 5).map((user, index) => (
          <div key={user.userId} className="relative">
            <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium">
              {user.userId.charAt(0).toUpperCase()}
            </div>
            <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white dark:border-gray-800 ${getStatusColor(user.status)}`}></div>
          </div>
        ))}
        {onlineUsers.length > 5 && (
          <div className="w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center text-gray-600 dark:text-gray-300 text-xs font-medium">
            +{onlineUsers.length - 5}
          </div>
        )}
      </div>
    </div>
  )
}

interface LiveActivityFeedProps {
  className?: string
}

export function LiveActivityFeed({ className = '' }: LiveActivityFeedProps) {
  const { subscribe } = useRealTime()
  const [activities, setActivities] = useState<Array<{
    id: string
    type: string
    message: string
    user: string
    timestamp: Date
  }>>([])

  useEffect(() => {
    const unsubscribeTask = subscribe('task:update', (data) => {
      setActivities(prev => [{
        id: `task-${Date.now()}`,
        type: 'task',
        message: `Task ${data.taskId} updated to ${data.status}`,
        user: data.assignee,
        timestamp: data.timestamp
      }, ...prev.slice(0, 19)])
    })

    const unsubscribeProject = subscribe('project:status', (data) => {
      setActivities(prev => [{
        id: `project-${Date.now()}`,
        type: 'project',
        message: `Project ${data.projectId} is now ${data.status} (${data.progress}% complete)`,
        user: 'System',
        timestamp: data.timestamp
      }, ...prev.slice(0, 19)])
    })

    const unsubscribeDocument = subscribe('document:update', (data) => {
      setActivities(prev => [{
        id: `document-${Date.now()}`,
        type: 'document',
        message: `Document ${data.documentId} was updated`,
        user: data.userId,
        timestamp: data.timestamp
      }, ...prev.slice(0, 19)])
    })

    return () => {
      unsubscribeTask()
      unsubscribeProject()
      unsubscribeDocument()
    }
  }, [subscribe])

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'task': return <CheckCircle className="w-4 h-4 text-blue-500" />
      case 'project': return <Activity className="w-4 h-4 text-green-500" />
      case 'document': return <Eye className="w-4 h-4 text-purple-500" />
      default: return <Clock className="w-4 h-4 text-gray-500" />
    }
  }

  const formatTime = (timestamp: Date) => {
    const now = new Date()
    const diff = now.getTime() - new Date(timestamp).getTime()
    const minutes = Math.floor(diff / 60000)
    
    if (minutes < 1) return 'Just now'
    if (minutes < 60) return `${minutes}m ago`
    
    const hours = Math.floor(minutes / 60)
    if (hours < 24) return `${hours}h ago`
    
    return new Date(timestamp).toLocaleDateString()
  }

  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 ${className}`}>
      <div className="flex items-center space-x-3 mb-4">
        <Activity className="w-5 h-5 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
          Live Activity Feed
        </h3>
        <div className="flex items-center space-x-1">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span className="text-sm text-gray-500 dark:text-gray-400">Live</span>
        </div>
      </div>

      <div className="space-y-3 max-h-96 overflow-y-auto">
        {activities.length === 0 ? (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            <Activity className="w-8 h-8 mx-auto mb-2 opacity-50" />
            <p>No recent activity</p>
          </div>
        ) : (
          activities.map((activity) => (
            <div key={activity.id} className="flex items-start space-x-3 p-3 rounded-lg bg-gray-50 dark:bg-gray-700">
              {getActivityIcon(activity.type)}
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-900 dark:text-gray-100">
                  {activity.message}
                </p>
                <div className="flex items-center space-x-2 mt-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    by {activity.user}
                  </span>
                  <span className="text-xs text-gray-400 dark:text-gray-500">
                    {formatTime(activity.timestamp)}
                  </span>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )
}

interface CollaborativeEditingProps {
  documentId: string
  className?: string
}

export function CollaborativeEditing({ documentId, className = '' }: CollaborativeEditingProps) {
  const { emit, subscribe } = useRealTime()
  const [content, setContent] = useState('')
  const [collaborators, setCollaborators] = useState<string[]>([])
  const [isEditing, setIsEditing] = useState(false)

  useEffect(() => {
    const unsubscribe = subscribe('document:update', (data) => {
      if (data.documentId === documentId && data.userId !== 'current-user') {
        setContent(data.changes.content || content)
      }
    })

    return unsubscribe
  }, [documentId, content, subscribe])

  const handleContentChange = (newContent: string) => {
    setContent(newContent)
    
    // Debounce updates
    const timeoutId = setTimeout(() => {
      emit('document:update', {
        documentId,
        changes: { content: newContent },
        userId: 'current-user',
        timestamp: new Date()
      })
    }, 300)

    return () => clearTimeout(timeoutId)
  }

  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700 ${className}`}>
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <MessageSquare className="w-5 h-5 text-green-600" />
          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
            Collaborative Document
          </h3>
        </div>
        
        <div className="flex items-center space-x-2">
          {collaborators.length > 0 && (
            <div className="flex items-center space-x-1">
              <Eye className="w-4 h-4 text-gray-500" />
              <span className="text-sm text-gray-500 dark:text-gray-400">
                {collaborators.length} editing
              </span>
            </div>
          )}
          <div className="flex items-center space-x-1">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-500 dark:text-gray-400">Live</span>
          </div>
        </div>
      </div>

      <div className="border border-gray-200 dark:border-gray-600 rounded-lg">
        <textarea
          value={content}
          onChange={(e) => handleContentChange(e.target.value)}
          onFocus={() => setIsEditing(true)}
          onBlur={() => setIsEditing(false)}
          placeholder="Start typing to collaborate in real-time..."
          className="w-full h-64 p-4 border-0 rounded-lg resize-none focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-gray-100"
        />
      </div>

      <div className="mt-4 flex items-center justify-between">
        <div className="text-sm text-gray-500 dark:text-gray-400">
          {content.length} characters
        </div>
        
        {isEditing && (
          <div className="flex items-center space-x-2 text-sm text-green-600">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span>Auto-saving...</span>
          </div>
        )}
      </div>
    </div>
  )
}
