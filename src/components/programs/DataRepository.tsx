"use client"

import { useState, useEffect } from 'react'
import { 
  DocumentArrowDownIcon, 
  TableCellsIcon, 
  ChartBarIcon,
  CalendarIcon,
  FunnelIcon,
  MagnifyingGlassIcon,
  CloudArrowDownIcon,
  DocumentTextIcon,
  PresentationChartLineIcon,
  ServerIcon,
  ArchiveBoxIcon,
  ClockIcon
} from '@heroicons/react/24/outline'

interface Dataset {
  id: string
  name: string
  project: string
  version: string
  lastUpdated: string
  size: string
  records: number
  status: 'active' | 'archived' | 'draft'
  format: 'excel' | 'csv' | 'json' | 'pdf'
  description: string
  tags: string[]
  createdBy: string
}

interface Report {
  id: string
  name: string
  type: 'monthly' | 'quarterly' | 'annual' | 'custom'
  project: string
  lastGenerated: string
  nextScheduled: string
  status: 'scheduled' | 'generated' | 'failed'
  format: 'pdf' | 'excel' | 'csv'
  recipients: string[]
  autoGenerated: boolean
}

export default function DataRepository() {
  const [activeTab, setActiveTab] = useState<'datasets' | 'reports' | 'exports'>('datasets')
  const [datasets, setDatasets] = useState<Dataset[]>([])
  const [reports, setReports] = useState<Report[]>([])
  const [loading, setLoading] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedProject, setSelectedProject] = useState('all')
  const [selectedFormat, setSelectedFormat] = useState('all')
  const [selectedStatus, setSelectedStatus] = useState('all')
  const [exporting, setExporting] = useState(false)

  useEffect(() => {
    loadDatasets()
    loadReports()
  }, [])

  const loadDatasets = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/meal/datasets')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setDatasets(result.data)
        }
      }
    } catch (error) {
      console.error('Failed to load datasets:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadReports = async () => {
    try {
      const response = await fetch('/api/meal/reports')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setReports(result.data)
        }
      }
    } catch (error) {
      console.error('Failed to load reports:', error)
    }
  }

  const handleExport = async (format: 'excel' | 'csv' | 'pdf') => {
    setExporting(true)
    try {
      const response = await fetch('/api/meal/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format,
          projectId: selectedProject,
          includeMetadata: true
        })
      })

      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          // Create download link
          const blob = new Blob([JSON.stringify(result.data)], { type: 'application/json' })
          const url = window.URL.createObjectURL(blob)
          const a = document.createElement('a')
          a.href = url
          a.download = result.filename
          document.body.appendChild(a)
          a.click()
          window.URL.revokeObjectURL(url)
          document.body.removeChild(a)
        }
      }
    } catch (error) {
      console.error('Export failed:', error)
    } finally {
      setExporting(false)
    }
  }

  const filteredDatasets = datasets.filter(dataset => {
    const matchesSearch = dataset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         dataset.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesProject = selectedProject === 'all' || dataset.project === selectedProject
    const matchesFormat = selectedFormat === 'all' || dataset.format === selectedFormat
    const matchesStatus = selectedStatus === 'all' || dataset.status === selectedStatus
    
    return matchesSearch && matchesProject && matchesFormat && matchesStatus
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800'
      case 'archived': return 'bg-gray-100 text-gray-800'
      case 'draft': return 'bg-yellow-100 text-yellow-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getFormatIcon = (format: string) => {
    switch (format) {
      case 'excel': return <TableCellsIcon className="h-5 w-5 text-green-600" />
      case 'csv': return <DocumentTextIcon className="h-5 w-5 text-blue-600" />
      case 'json': return <ServerIcon className="h-5 w-5 text-purple-600" />
      case 'pdf': return <DocumentTextIcon className="h-5 w-5 text-red-600" />
      default: return <DocumentTextIcon className="h-5 w-5 text-gray-600" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Data Repository & Reports</h2>
            <p className="text-gray-600 mt-1">Advanced data management, versioning, and automated reporting</p>
          </div>
          <div className="flex items-center space-x-3">
            <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
              <CloudArrowDownIcon className="h-5 w-5" />
              <span>Bulk Export</span>
            </button>
            <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2">
              <DocumentArrowDownIcon className="h-5 w-5" />
              <span>Generate Report</span>
            </button>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {[
            { id: 'datasets', label: 'Datasets', icon: ArchiveBoxIcon },
            { id: 'reports', label: 'Reports', icon: DocumentTextIcon },
            { id: 'exports', label: 'Exports', icon: CloudArrowDownIcon }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon className="h-5 w-5" />
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="relative">
            <MagnifyingGlassIcon className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search datasets..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <select
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Projects</option>
            <option value="Community Water Program">Community Water Program</option>
            <option value="All Projects">All Projects</option>
          </select>
          <select
            value={selectedFormat}
            onChange={(e) => setSelectedFormat(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Formats</option>
            <option value="excel">Excel</option>
            <option value="csv">CSV</option>
            <option value="json">JSON</option>
            <option value="pdf">PDF</option>
          </select>
          <select
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="archived">Archived</option>
            <option value="draft">Draft</option>
          </select>
        </div>
      </div>

      {/* Content based on active tab */}
      {activeTab === 'datasets' && (
        <div className="space-y-6">
          {/* Dataset Statistics */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="p-3 bg-blue-100 rounded-lg">
                  <ArchiveBoxIcon className="h-6 w-6 text-blue-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Datasets</p>
                  <p className="text-2xl font-bold text-gray-900">{datasets.length}</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="p-3 bg-green-100 rounded-lg">
                  <ChartBarIcon className="h-6 w-6 text-green-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Records</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {datasets.reduce((sum, dataset) => sum + dataset.records, 0).toLocaleString()}
                  </p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="p-3 bg-purple-100 rounded-lg">
                  <ServerIcon className="h-6 w-6 text-purple-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Storage Used</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {datasets.reduce((sum, dataset) => {
                      const size = parseFloat(dataset.size.replace(' MB', '').replace(' KB', ''))
                      return sum + (dataset.size.includes('MB') ? size : size / 1024)
                    }, 0).toFixed(1)} MB
                  </p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="p-3 bg-orange-100 rounded-lg">
                  <ClockIcon className="h-6 w-6 text-orange-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Last Updated</p>
                  <p className="text-2xl font-bold text-gray-900">Today</p>
                </div>
              </div>
            </div>
          </div>

          {/* Datasets List */}
          <div className="bg-white rounded-lg border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Datasets ({filteredDatasets.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {filteredDatasets.map((dataset) => (
                <div key={dataset.id} className="p-6 hover:bg-gray-50 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      {getFormatIcon(dataset.format)}
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900">{dataset.name}</h4>
                        <p className="text-sm text-gray-600">{dataset.description}</p>
                        <div className="flex items-center space-x-4 mt-2">
                          <span className="text-sm text-gray-500">Project: {dataset.project}</span>
                          <span className="text-sm text-gray-500">Version: {dataset.version}</span>
                          <span className="text-sm text-gray-500">Records: {dataset.records.toLocaleString()}</span>
                          <span className="text-sm text-gray-500">Size: {dataset.size}</span>
                        </div>
                        <div className="flex items-center space-x-2 mt-2">
                          {dataset.tags.map((tag, index) => (
                            <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(dataset.status)}`}>
                        {dataset.status}
                      </span>
                      <div className="flex items-center space-x-2">
                        <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                          <DocumentArrowDownIcon className="h-5 w-5" />
                        </button>
                        <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                          <MagnifyingGlassIcon className="h-5 w-5" />
                        </button>
                        <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                          <ArchiveBoxIcon className="h-5 w-5" />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'reports' && (
        <div className="space-y-6">
          {/* Reports List */}
          <div className="bg-white rounded-lg border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Automated Reports ({reports.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {reports.map((report) => (
                <div key={report.id} className="p-6 hover:bg-gray-50 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <PresentationChartLineIcon className="h-8 w-8 text-blue-600" />
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900">{report.name}</h4>
                        <p className="text-sm text-gray-600">Project: {report.project}</p>
                        <div className="flex items-center space-x-4 mt-2">
                          <span className="text-sm text-gray-500">Type: {report.type}</span>
                          <span className="text-sm text-gray-500">Last Generated: {report.lastGenerated}</span>
                          <span className="text-sm text-gray-500">Next: {report.nextScheduled}</span>
                          <span className="text-sm text-gray-500">Format: {report.format.toUpperCase()}</span>
                        </div>
                        <div className="flex items-center space-x-2 mt-2">
                          <span className="text-sm text-gray-500">Recipients: {report.recipients.join(', ')}</span>
                          {report.autoGenerated && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              Auto-Generated
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        report.status === 'generated' ? 'bg-green-100 text-green-800' :
                        report.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {report.status}
                      </span>
                      <div className="flex items-center space-x-2">
                        <button className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm">
                          Generate Now
                        </button>
                        <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                          <DocumentArrowDownIcon className="h-5 w-5" />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'exports' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Export Options</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="border border-gray-200 rounded-lg p-6 hover:border-blue-500 hover:shadow-md transition-all">
                <div className="text-center">
                  <TableCellsIcon className="h-12 w-12 text-green-600 mx-auto mb-4" />
                  <h4 className="text-lg font-semibold text-gray-900 mb-2">Excel Export</h4>
                  <p className="text-sm text-gray-600 mb-4">Export all data in Excel format with formatting and charts</p>
                  <button 
                    onClick={() => handleExport('excel')}
                    disabled={exporting}
                    className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50"
                  >
                    {exporting ? 'Exporting...' : 'Export to Excel'}
                  </button>
                </div>
              </div>
              <div className="border border-gray-200 rounded-lg p-6 hover:border-blue-500 hover:shadow-md transition-all">
                <div className="text-center">
                  <DocumentTextIcon className="h-12 w-12 text-blue-600 mx-auto mb-4" />
                  <h4 className="text-lg font-semibold text-gray-900 mb-2">CSV Export</h4>
                  <p className="text-sm text-gray-600 mb-4">Export raw data in CSV format for analysis</p>
                  <button 
                    onClick={() => handleExport('csv')}
                    disabled={exporting}
                    className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50"
                  >
                    {exporting ? 'Exporting...' : 'Export to CSV'}
                  </button>
                </div>
              </div>
              <div className="border border-gray-200 rounded-lg p-6 hover:border-blue-500 hover:shadow-md transition-all">
                <div className="text-center">
                  <DocumentTextIcon className="h-12 w-12 text-red-600 mx-auto mb-4" />
                  <h4 className="text-lg font-semibold text-gray-900 mb-2">PDF Report</h4>
                  <p className="text-sm text-gray-600 mb-4">Generate comprehensive PDF reports</p>
                  <button 
                    onClick={() => handleExport('pdf')}
                    disabled={exporting}
                    className="w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors disabled:opacity-50"
                  >
                    {exporting ? 'Generating...' : 'Generate PDF'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
