'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { ModulePage } from "@/components/layout/enhanced-layout"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ExportButton } from "@/components/ui/export-button"
import { PrintButton } from "@/components/ui/print-button"
import { 
  BuildingOfficeIcon,
  PlusIcon,
  UserGroupIcon,
  ChartBarIcon,
  PencilIcon,
  TrashIcon,
  EyeIcon,
  XMarkIcon,
  MapPinIcon,
  CurrencyDollarIcon
} from '@heroicons/react/24/outline'

interface Department {
  id: string
  name: string
  description?: string
  code?: string
  manager?: string
  budget?: number
  location?: string
  status: string
  employeeCount: number
  employees?: Array<{
    id: string
    employeeId: string
    firstName: string
    lastName: string
    position: string
    email: string
  }>
  createdAt: string
  updatedAt: string
}

export default function DepartmentsPage() {
  const { data: session } = useSession()
  const [departments, setDepartments] = useState<Department[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  
  // Modal states
  const [showAddModal, setShowAddModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showViewModal, setShowViewModal] = useState(false)
  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null)
  
  // Form states
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    code: '',
    manager: '',
    budget: '',
    location: '',
    status: 'ACTIVE'
  })
  const [formLoading, setFormLoading] = useState(false)

  // Metadata for ModulePage
  const metadata = {
    title: "Departments Management",
    description: "Manage organizational departments, assign managers, and track employee distribution"
  }

  // Actions for the page
  const actions = [
    {
      label: "Add Department",
      onClick: () => {
        setFormData({
          name: '',
          description: '',
          code: '',
          manager: '',
          budget: '',
          location: '',
          status: 'ACTIVE'
        })
        setShowAddModal(true)
      },
      icon: PlusIcon,
      variant: "default" as const
    }
  ]

  useEffect(() => {
    fetchDepartments()
  }, [])

  const fetchDepartments = async () => {
    try {
      setLoading(true)
      setError('')
      const response = await fetch('/api/hr/department')
      
      if (!response.ok) {
        throw new Error('Failed to fetch departments')
      }
      
      const result = await response.json()
      
      if (result.success) {
        setDepartments(result.data || [])
      } else {
        throw new Error(result.error || 'Failed to fetch departments')
      }
    } catch (err) {
      console.error('Error fetching departments:', err)
      setError(err instanceof Error ? err.message : 'Failed to fetch departments')
      setDepartments([])
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.name.trim()) {
      setError('Department name is required')
      return
    }

    try {
      setFormLoading(true)
      setError('')
      
      const url = selectedDepartment 
        ? `/api/hr/department/${selectedDepartment.id}`
        : '/api/hr/department'
      
      const method = selectedDepartment ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      const result = await response.json()

      if (result.success) {
        await fetchDepartments()
        setShowAddModal(false)
        setShowEditModal(false)
        setSelectedDepartment(null)
        setFormData({
          name: '',
          description: '',
          code: '',
          manager: '',
          budget: '',
          location: '',
          status: 'ACTIVE'
        })
      } else {
        setError(result.error || 'Failed to save department')
      }
    } catch (err) {
      console.error('Error saving department:', err)
      setError('Failed to save department')
    } finally {
      setFormLoading(false)
    }
  }

  const handleEdit = (department: Department) => {
    setSelectedDepartment(department)
    setFormData({
      name: department.name,
      description: department.description || '',
      code: department.code || '',
      manager: department.manager || '',
      budget: department.budget?.toString() || '',
      location: department.location || '',
      status: department.status
    })
    setShowEditModal(true)
  }

  const handleView = (department: Department) => {
    setSelectedDepartment(department)
    setShowViewModal(true)
  }

  const handleDelete = async (department: Department) => {
    if (!window.confirm(`Are you sure you want to delete the ${department.name} department?`)) {
      return
    }

    try {
      setError('')
      const response = await fetch(`/api/hr/department/${department.id}`, {
        method: 'DELETE',
      })

      const result = await response.json()

      if (result.success) {
        await fetchDepartments()
      } else {
        setError(result.error || 'Failed to delete department')
      }
    } catch (err) {
      console.error('Error deleting department:', err)
      setError('Failed to delete department')
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return 'bg-green-100 text-green-800'
      case 'INACTIVE':
        return 'bg-gray-100 text-gray-800'
      case 'RESTRUCTURING':
        return 'bg-yellow-100 text-yellow-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  // Export configuration
  const exportData = departments.map(dept => ({
    'Department Name': dept.name,
    'Description': dept.description || '',
    'Code': dept.code || '',
    'Manager': dept.manager || '',
    'Budget': dept.budget ? `$${dept.budget.toLocaleString()}` : '',
    'Location': dept.location || '',
    'Status': dept.status,
    'Employee Count': dept.employeeCount,
    'Created': new Date(dept.createdAt).toLocaleDateString(),
    'Last Updated': new Date(dept.updatedAt).toLocaleDateString()
  }))

  if (loading) {
    return (
      <ModulePage metadata={metadata} actions={actions}>
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
          <span className="ml-3 text-gray-600">Loading departments...</span>
        </div>
      </ModulePage>
    )
  }

  return (
    <ModulePage metadata={metadata} actions={actions}>
      <div className="space-y-6">
        {/* Error Alert */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <XMarkIcon className="h-5 w-5 text-red-400" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
              <div className="ml-auto pl-3">
                <button
                  onClick={() => setError('')}
                  className="inline-flex bg-red-50 rounded-md p-1.5 text-red-500 hover:bg-red-100"
                >
                  <XMarkIcon className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <BuildingOfficeIcon className="h-8 w-8 text-orange-600" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Total Departments
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {departments.length}
                  </dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <UserGroupIcon className="h-8 w-8 text-green-600" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Total Employees
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {departments.reduce((sum, dept) => sum + dept.employeeCount, 0)}
                  </dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <ChartBarIcon className="h-8 w-8 text-blue-600" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Active Departments
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {departments.filter(d => d.status === 'ACTIVE').length}
                  </dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <CurrencyDollarIcon className="h-8 w-8 text-purple-600" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Total Budget
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    ${departments.reduce((sum, dept) => sum + (dept.budget || 0), 0).toLocaleString()}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        {/* Export Actions */}
        <div className="flex justify-end space-x-3">
          <ExportButton
            data={exportData}
            filename="departments"
            className="bg-green-600 hover:bg-green-700"
          />
          <PrintButton
            data={exportData}
            title="Departments Report"
            className="bg-blue-600 hover:bg-blue-700"
          />
        </div>

        {/* Departments Grid */}
        <div className="bg-white shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
              Departments
            </h3>
            
            {departments.length === 0 ? (
              <div className="text-center py-12">
                <BuildingOfficeIcon className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No departments</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Get started by creating a new department.
                </p>
                <div className="mt-6">
                  <button
                    type="button"
                    onClick={() => setShowAddModal(true)}
                    className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700"
                  >
                    <PlusIcon className="-ml-1 mr-2 h-5 w-5" />
                    Add Department
                  </button>
                </div>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {departments.map((department) => (
                  <div key={department.id} className="border rounded-lg p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div className="flex-shrink-0">
                          <BuildingOfficeIcon className="h-8 w-8 text-orange-600" />
                        </div>
                        <div>
                          <h4 className="text-lg font-medium text-gray-900">{department.name}</h4>
                          {department.code && (
                            <p className="text-sm text-gray-500">Code: {department.code}</p>
                          )}
                        </div>
                      </div>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(department.status)}`}>
                        {department.status}
                      </span>
                    </div>

                    <div className="space-y-2 mb-4">
                      {department.description && (
                        <p className="text-sm text-gray-600">{department.description}</p>
                      )}
                      
                      <div className="flex items-center text-sm text-gray-500">
                        <UserGroupIcon className="h-4 w-4 mr-2" />
                        {department.employeeCount} employees
                      </div>
                      
                      {department.manager && (
                        <div className="flex items-center text-sm text-gray-500">
                          <span className="font-medium">Manager:</span>
                          <span className="ml-1">{department.manager}</span>
                        </div>
                      )}
                      
                      {department.location && (
                        <div className="flex items-center text-sm text-gray-500">
                          <MapPinIcon className="h-4 w-4 mr-2" />
                          {department.location}
                        </div>
                      )}
                      
                      {department.budget && (
                        <div className="flex items-center text-sm text-gray-500">
                          <CurrencyDollarIcon className="h-4 w-4 mr-2" />
                          ${department.budget.toLocaleString()}
                        </div>
                      )}
                    </div>

                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleView(department)}
                        className="flex-1 inline-flex justify-center items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                      >
                        <EyeIcon className="h-4 w-4 mr-1" />
                        View
                      </button>
                      <button
                        onClick={() => handleEdit(department)}
                        className="flex-1 inline-flex justify-center items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                      >
                        <PencilIcon className="h-4 w-4 mr-1" />
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(department)}
                        className="flex-1 inline-flex justify-center items-center px-3 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50"
                        disabled={department.employeeCount > 0}
                        title={department.employeeCount > 0 ? "Cannot delete department with employees" : "Delete department"}
                      >
                        <TrashIcon className="h-4 w-4 mr-1" />
                        Delete
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Add Department Modal */}
      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Add New Department</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Department Name *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                placeholder="e.g., Human Resources"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                rows={3}
                placeholder="Department description..."
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Department Code</label>
              <input
                type="text"
                value={formData.code}
                onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                placeholder="e.g., HR, IT, FIN"
                maxLength={10}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Manager</label>
              <input
                type="text"
                value={formData.manager}
                onChange={(e) => setFormData({ ...formData, manager: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                placeholder="Department manager name"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Annual Budget</label>
              <input
                type="number"
                value={formData.budget}
                onChange={(e) => setFormData({ ...formData, budget: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                placeholder="0"
                min="0"
                step="0.01"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Location</label>
              <input
                type="text"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                placeholder="Office location or building"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Status</label>
              <select
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
              >
                <option value="ACTIVE">Active</option>
                <option value="INACTIVE">Inactive</option>
                <option value="RESTRUCTURING">Restructuring</option>
              </select>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setShowAddModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={formLoading}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 disabled:opacity-50"
              >
                {formLoading ? 'Creating...' : 'Create Department'}
              </button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Edit Department Modal */}
      <Dialog open={showEditModal} onOpenChange={setShowEditModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Edit Department</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Department Name *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                rows={3}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Department Code</label>
              <input
                type="text"
                value={formData.code}
                onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                maxLength={10}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Manager</label>
              <input
                type="text"
                value={formData.manager}
                onChange={(e) => setFormData({ ...formData, manager: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Annual Budget</label>
              <input
                type="number"
                value={formData.budget}
                onChange={(e) => setFormData({ ...formData, budget: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
                min="0"
                step="0.01"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Location</label>
              <input
                type="text"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Status</label>
              <select
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-orange-500 focus:border-orange-500"
              >
                <option value="ACTIVE">Active</option>
                <option value="INACTIVE">Inactive</option>
                <option value="RESTRUCTURING">Restructuring</option>
              </select>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setShowEditModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={formLoading}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 disabled:opacity-50"
              >
                {formLoading ? 'Updating...' : 'Update Department'}
              </button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* View Department Modal */}
      <Dialog open={showViewModal} onOpenChange={setShowViewModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Department Details</DialogTitle>
          </DialogHeader>
          {selectedDepartment && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-900">{selectedDepartment.name}</h3>
                  {selectedDepartment.code && (
                    <p className="text-sm text-gray-500">Code: {selectedDepartment.code}</p>
                  )}
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(selectedDepartment.status)} mt-2`}>
                    {selectedDepartment.status}
                  </span>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-500">Employee Count</p>
                  <p className="text-2xl font-bold text-orange-600">{selectedDepartment.employeeCount}</p>
                </div>
              </div>
              
              {selectedDepartment.description && (
                <div>
                  <h4 className="text-sm font-medium text-gray-900">Description</h4>
                  <p className="text-sm text-gray-600 mt-1">{selectedDepartment.description}</p>
                </div>
              )}
              
              <div className="grid grid-cols-2 gap-4">
                {selectedDepartment.manager && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900">Manager</h4>
                    <p className="text-sm text-gray-600">{selectedDepartment.manager}</p>
                  </div>
                )}
                
                {selectedDepartment.location && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900">Location</h4>
                    <p className="text-sm text-gray-600">{selectedDepartment.location}</p>
                  </div>
                )}
                
                {selectedDepartment.budget && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900">Annual Budget</h4>
                    <p className="text-sm text-gray-600">${selectedDepartment.budget.toLocaleString()}</p>
                  </div>
                )}
                
                <div>
                  <h4 className="text-sm font-medium text-gray-900">Created</h4>
                  <p className="text-sm text-gray-600">{new Date(selectedDepartment.createdAt).toLocaleDateString()}</p>
                </div>
              </div>

              {selectedDepartment.employees && selectedDepartment.employees.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-3">Employees ({selectedDepartment.employees.length})</h4>
                  <div className="max-h-60 overflow-y-auto">
                    <div className="space-y-2">
                      {selectedDepartment.employees.map((employee) => (
                        <div key={employee.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div>
                            <p className="text-sm font-medium text-gray-900">
                              {employee.firstName} {employee.lastName}
                            </p>
                            <p className="text-xs text-gray-500">{employee.position}</p>
                          </div>
                          <div className="text-right">
                            <p className="text-xs text-gray-500">{employee.employeeId}</p>
                            <p className="text-xs text-gray-500">{employee.email}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
              
              <div className="flex justify-end space-x-3 pt-4">
                <button
                  onClick={() => setShowViewModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  Close
                </button>
                <button
                  onClick={() => {
                    setShowViewModal(false)
                    handleEdit(selectedDepartment)
                  }}
                  className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700"
                >
                  Edit Department
                </button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </ModulePage>
  )
}
