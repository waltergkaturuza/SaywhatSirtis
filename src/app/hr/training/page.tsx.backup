"use client"

import { ModulePage } from "@/components/layout/enhanced-layout"
import { useState, useEffect } from "react"
import Link from "next/link"
import { ExportButton } from "@/components/ui/export-button"
import { ImportButton } from "@/components/ui/import-button"
import { PrintButton } from "@/components/ui/print-button"
import { DownloadExcelButton, DownloadPDFButton } from "@/components/ui/download-button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import {
  AcademicCapIcon,
  PlusIcon,
  CalendarIcon,
  ClockIcon,
  CheckCircleIcon,
  PlayIcon,
  BookOpenIcon,
  UserGroupIcon,
  ArrowDownTrayIcon,
  DocumentTextIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  TrophyIcon
} from "@heroicons/react/24/outline"

export default function TrainingPage() {
  const [activeTab, setActiveTab] = useState("programs")
  const [selectedProgram, setSelectedProgram] = useState<any>(null)
  const [showViewModal, setShowViewModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [trainingPrograms, setTrainingPrograms] = useState<any[]>([])
  const [analytics, setAnalytics] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [enrollments, setEnrollments] = useState<any[]>([])
  const [certificates, setCertificates] = useState<any[]>([])
  const [editFormData, setEditFormData] = useState<{
    title?: string
    description?: string
    category?: string
    duration?: string
    format?: string
    capacity?: number
    instructor?: string
    status?: string
    certificationAvailable?: boolean
    startDate?: string
    endDate?: string
  }>({})

  // Fetch training programs and analytics
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        
        const [programsResponse, analyticsResponse] = await Promise.all([
          fetch('/api/hr/training/programs'),
          fetch('/api/hr/training/analytics')
        ])

        if (programsResponse.ok) {
          const programsData = await programsResponse.json()
          setTrainingPrograms(programsData.programs || [])
        }

        if (analyticsResponse.ok) {
          const analyticsData = await analyticsResponse.json()
          setAnalytics(analyticsData.analytics)
        }
      } catch (error) {
        console.error('Failed to fetch training data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  const handleViewProgram = (program: any) => {
    setSelectedProgram(program)
    setShowViewModal(true)
  }

  const handleEditProgram = (program: any) => {
    setSelectedProgram(program)
    setEditFormData({
      title: program.title,
      description: program.description,
      category: program.category,
      duration: program.duration,
      format: program.format,
      capacity: program.capacity,
      instructor: program.instructor,
      status: program.status,
      certificationAvailable: program.certificationAvailable,
      startDate: program.startDate?.split('T')[0],
      endDate: program.endDate?.split('T')[0]
    })
    setShowEditModal(true)
  }

  const handleSaveChanges = async () => {
    if (selectedProgram) {
      try {
        const response = await fetch(`/api/hr/training/programs/${selectedProgram.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(editFormData)
        })

        if (response.ok) {
          // Refresh the programs list
          const programsResponse = await fetch('/api/hr/training/programs')
          if (programsResponse.ok) {
            const data = await programsResponse.json()
            setTrainingPrograms(data.programs || [])
          }
          alert('Program updated successfully!')
          setShowEditModal(false)
        } else {
          const error = await response.json()
          alert(`Failed to update program: ${error.error}`)
        }
      } catch (error) {
        console.error('Error updating program:', error)
        alert('Failed to update program')
      }
    }
  }

  const handleDeleteProgram = async (programId: string) => {
    if (confirm('Are you sure you want to delete this training program?')) {
      try {
        const response = await fetch(`/api/hr/training/programs/${programId}`, {
          method: 'DELETE'
        })

        if (response.ok) {
          // Refresh the programs list
          const programsResponse = await fetch('/api/hr/training/programs')
          if (programsResponse.ok) {
            const data = await programsResponse.json()
            setTrainingPrograms(data.programs || [])
          }
          alert('Program deleted successfully!')
        } else {
          const error = await response.json()
          alert(`Failed to delete program: ${error.error}`)
        }
      } catch (error) {
        console.error('Error deleting program:', error)
        alert('Failed to delete program')
      }
    }
  }

  const metadata = {
    title: "Training Management",
    description: "Manage training programs, courses, and certifications",
    breadcrumbs: [
      { name: "SIRTIS" },
      { name: "HR Management", href: "/hr/dashboard" },
      { name: "Training" }
    ]
  }

  const actions = (
    <>
      <ImportButton
        onImportComplete={(result) => {
          if (result.success) {
            console.log('Training import completed:', result)
          }
        }}
        acceptedFormats={['excel', 'csv']}
        templateFields={['title', 'description', 'category', 'duration', 'format', 'instructor', 'capacity']}
        title="Import Training Programs"
        variant="outline"
        size="sm"
      />
      <ExportButton
        data={{
          headers: ['Title', 'Category', 'Duration', 'Format', 'Status', 'Instructor', 'Capacity', 'Start Date', 'End Date'],
          rows: (trainingPrograms || []).map(program => [
            program.title,
            program.category,
            program.duration || 'N/A',
            program.format || 'N/A',
            program.status,
            program.instructor || 'N/A',
            program.capacity?.toString() || 'N/A',
            program.startDate ? new Date(program.startDate).toLocaleDateString() : 'N/A',
            program.endDate ? new Date(program.endDate).toLocaleDateString() : 'N/A'
          ])
        }}
        filename="training-programs-export"
        title="Export Training Programs"
        showOptions={true}
      />
      <Link href="/hr/training/create">
        <button className="inline-flex items-center px-4 py-2 bg-orange-600 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-orange-700">
          <PlusIcon className="h-4 w-4 mr-2" />
          Create Program
        </button>
      </Link>
    </>
  )

  const sidebar = (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Training Overview</h3>
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-sm text-gray-600">Active Programs</span>
            <span className="font-semibold text-orange-600">
              {analytics?.overview?.totalPrograms || 0}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-600">Enrollments</span>
            <span className="font-semibold text-green-600">
              {analytics?.overview?.totalEnrollments || 0}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-600">Completions</span>
            <span className="font-semibold text-orange-600">
              {analytics?.overview?.completedEnrollments || 0}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-600">Certifications</span>
            <span className="font-semibold text-green-600">
              {analytics?.overview?.certificatesIssued || 0}
            </span>
          </div>
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Training Categories</h3>
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Leadership</span>
            <div className="flex items-center space-x-2">
              <div className="w-16 bg-gray-200 rounded-full h-2">
                <div className="bg-orange-500 h-2 rounded-full" style={{ width: "65%" }}></div>
              </div>
              <span className="text-xs text-gray-500">65%</span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Technical Skills</span>
            <div className="flex items-center space-x-2">
              <div className="w-16 bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={{ width: "80%" }}></div>
              </div>
              <span className="text-xs text-gray-500">80%</span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Compliance</span>
            <div className="flex items-center space-x-2">
              <div className="w-16 bg-gray-200 rounded-full h-2">
                <div className="bg-yellow-500 h-2 rounded-full" style={{ width: "45%" }}></div>
              </div>
              <span className="text-xs text-gray-500">45%</span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Safety</span>
            <div className="flex items-center space-x-2">
              <div className="w-16 bg-gray-200 rounded-full h-2">
                <div className="bg-red-500 h-2 rounded-full" style={{ width: "90%" }}></div>
              </div>
              <span className="text-xs text-gray-500">90%</span>
            </div>
          </div>
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
        <div className="space-y-2">
          <Link href="/hr/training/create" className="block w-full text-left p-2 text-sm text-orange-600 hover:bg-orange-50 rounded">
            Create Program
          </Link>
          <Link href="/hr/training/enroll" className="block w-full text-left p-2 text-sm text-green-600 hover:bg-green-50 rounded">
            Enroll Employees
          </Link>
          <Link href="/hr/training/calendar" className="block w-full text-left p-2 text-sm text-orange-600 hover:bg-orange-50 rounded">
            Training Calendar
          </Link>
          <Link href="/hr/training/certificates" className="block w-full text-left p-2 text-sm text-green-600 hover:bg-green-50 rounded">
            Certificates
          </Link>
        </div>
      </div>
    </div>
  )

  // Real data will be fetched from APIs
    {
      id: 1,
      employeeName: "Sarah Johnson",
      employeeId: "EMP001",
      program: "Leadership Development Program",
      enrollDate: "2024-01-28",
      progress: 85,
      status: "in-progress",
      expectedCompletion: "2024-03-10",
      grade: null,
      certificateIssued: false
    },
    {
      id: 2,
      employeeName: "Michael Adebayo",
      employeeId: "EMP002",
      program: "Data Analysis with Python",
      enrollDate: "2024-01-14",
      progress: 60,
      status: "in-progress",
      expectedCompletion: "2024-02-08",
      grade: null,
      certificateIssued: false
    },
    {
      id: 3,
      employeeName: "David Okonkwo",
      employeeId: "EMP004",
      program: "Workplace Safety Training",
      enrollDate: "2024-01-19",
      progress: 100,
      status: "completed",
      expectedCompletion: "2024-01-20",
      grade: "A",
      certificateIssued: true
    },
    {
      id: 4,
      employeeName: "Fatima Bello",
      employeeId: "EMP005",
      program: "Leadership Development Program",
      enrollDate: "2024-01-30",
      progress: 25,
      status: "in-progress",
      expectedCompletion: "2024-03-12",
      grade: null,
      certificateIssued: false
    }
  ]

  const certificates = [
    {
      id: 1,
      employeeName: "David Okonkwo",
      program: "Workplace Safety Training",
      issueDate: "2024-01-20",
      expiryDate: "2025-01-20",
      grade: "A",
      certificateNumber: "WS-2024-001",
      status: "active"
    },
    {
      id: 2,
      employeeName: "Alice Brown",
      program: "Data Analysis with Python",
      issueDate: "2024-01-10",
      expiryDate: "2026-01-10",
      grade: "B+",
      certificateNumber: "DA-2024-002",
      status: "active"
    },
    {
      id: 3,
      employeeName: "John Smith",
      program: "Leadership Development Program",
      issueDate: "2023-12-15",
      expiryDate: "2025-12-15",
      grade: "A-",
      certificateNumber: "LD-2023-015",
      status: "active"
    }
  ]

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active":
        return "bg-green-100 text-green-800"
      case "ACTIVE":
        return "bg-green-100 text-green-800"
      case "completed":
        return "bg-orange-100 text-orange-800"
      case "COMPLETED":
        return "bg-orange-100 text-orange-800"
      case "upcoming":
        return "bg-gray-100 text-gray-800"
      case "DRAFT":
        return "bg-gray-100 text-gray-800"
      case "cancelled":
        return "bg-red-100 text-red-800"
      case "INACTIVE":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getEnrollmentStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "bg-green-100 text-green-800"
      case "COMPLETED":
        return "bg-green-100 text-green-800"
      case "in-progress":
        return "bg-orange-100 text-orange-800"
      case "IN_PROGRESS":
        return "bg-orange-100 text-orange-800"
      case "not-started":
        return "bg-gray-100 text-gray-800"
      case "ENROLLED":
        return "bg-gray-100 text-gray-800"
      case "dropped":
        return "bg-red-100 text-red-800"
      case "DROPPED":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getFormatIcon = (format: string) => {
    switch (format) {
      case "Online":
        return <PlayIcon className="h-4 w-4 text-orange-600" />
      case "In-person":
        return <UserGroupIcon className="h-4 w-4 text-green-600" />
      case "Hybrid":
      case "Blended":
        return <BookOpenIcon className="h-4 w-4 text-orange-600" />
      default:
        return <BookOpenIcon className="h-4 w-4 text-gray-600" />
    }
  }

  const tabs = [
    { id: "programs", name: "Training Programs", icon: AcademicCapIcon },
    { id: "enrollments", name: "Enrollments", icon: UserGroupIcon },
    { id: "certificates", name: "Certificates", icon: TrophyIcon }
  ]

  return (
    <ModulePage
      metadata={metadata}
      actions={actions}
      sidebar={sidebar}
    >
      <div className="space-y-6">
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
            <span className="ml-3 text-gray-600">Loading training data...</span>
          </div>
        ) : (
          <>
        {/* Training Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg border p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <AcademicCapIcon className="w-6 h-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  {analytics?.overview?.totalPrograms || 0}
                </h3>
                <p className="text-sm text-gray-500">Active Programs</p>
              </div>
            </div>
            <div className="mt-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">Running</span>
                <span className="text-orange-600 font-medium">Active</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg border p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <UserGroupIcon className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  {analytics?.overview?.totalEnrollments || 0}
                </h3>
                <p className="text-sm text-gray-500">Total Enrollments</p>
              </div>
            </div>
            <div className="mt-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">All time</span>
                <span className="text-green-600 font-medium">
                  {analytics?.overview?.completionRate || 0}% rate
                </span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg border p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <CheckCircleIcon className="w-6 h-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  {analytics?.overview?.completedEnrollments || 0}
                </h3>
                <p className="text-sm text-gray-500">Completions</p>
              </div>
            </div>
            <div className="mt-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">
                  {analytics?.overview?.completionRate || 0}% completion rate
                </span>
                <span className="text-orange-600 font-medium">
                  {(analytics?.overview?.completionRate || 0) >= 70 ? 'Good' : 'Fair'}
                </span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg border p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <TrophyIcon className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  {analytics?.overview?.certificatesIssued || 0}
                </h3>
                <p className="text-sm text-gray-500">Certificates Issued</p>
              </div>
            </div>
            <div className="mt-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-500">All time</span>
                <span className="text-green-600 font-medium">Available</span>
              </div>
            </div>
          </div>
        </div>

        {/* Agora Learning Platform & Certificate Upload Section */}
        <div className="bg-white rounded-lg border overflow-hidden">
          <div className="bg-orange-600 px-6 py-4">
            <h2 className="text-xl font-semibold text-white">Required Learning Platform</h2>
            <p className="text-orange-100 mt-1">Complete mandatory courses on Agora and submit certificates</p>
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Agora Platform Information */}
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <AcademicCapIcon className="w-5 h-5 text-orange-600" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900">Agora Learning Platform</h3>
                </div>
                
                <p className="text-gray-600">
                  All employees must complete mandatory courses on the Agora platform. Access your required training modules and track your progress.
                </p>
                
                <div className="space-y-3">
                  <div className="p-4 bg-orange-50 rounded-lg border border-orange-200">
                    <h4 className="font-medium text-orange-900 mb-2">Platform Access</h4>
                    <a 
                      href="https://agora.learning.platform" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center px-4 py-2 bg-orange-600 text-white text-sm font-medium rounded-md hover:bg-orange-700 transition-colors"
                    >
                      <BookOpenIcon className="w-4 h-4 mr-2" />
                      Access Agora Platform
                    </a>
                  </div>
                  
                  <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                    <h4 className="font-medium text-green-900 mb-2">Learner's Hub</h4>
                    <p className="text-sm text-green-700 mb-3">
                      Submit your completed course certificates and track your learning progress.
                    </p>
                    <a 
                      href="https://learners.hub.portal" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 transition-colors"
                    >
                      <DocumentTextIcon className="w-4 h-4 mr-2" />
                      Access Learner's Hub
                    </a>
                  </div>
                </div>
              </div>
              
              {/* Certificate Upload Section */}
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <TrophyIcon className="w-5 h-5 text-green-600" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900">Upload Certificates</h3>
                </div>
                
                <p className="text-gray-600">
                  Upload your completed course certificates as proof of training completion. These will be automatically added to your employee file.
                </p>
                
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-gray-400 transition-colors">
                  <div className="text-center">
                    <ArrowDownTrayIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <div className="mt-4">
                      <label htmlFor="certificate-upload" className="cursor-pointer">
                        <span className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                          <PlusIcon className="w-4 h-4 mr-2" />
                          Upload Certificate
                        </span>
                        <input
                          id="certificate-upload"
                          name="certificate-upload"
                          type="file"
                          className="sr-only"
                          multiple
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={(e) => {
                            const files = e.target.files
                            if (files) {
                              console.log('Files selected:', files)
                              // TODO: Implement file upload logic
                              alert(`Selected ${files.length} file(s) for upload`)
                            }
                          }}
                        />
                      </label>
                    </div>
                    <p className="mt-2 text-sm text-gray-500">
                      PDF, JPG, PNG up to 10MB each
                    </p>
                  </div>
                </div>
                
                {/* Sample uploaded certificates */}
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-gray-700">Recently Uploaded:</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <DocumentTextIcon className="w-5 h-5 text-red-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Leadership Training Certificate</p>
                          <p className="text-xs text-gray-500">Uploaded 2 days ago</p>
                        </div>
                      </div>
                      <CheckCircleIcon className="w-5 h-5 text-green-500" />
                    </div>
                    <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <DocumentTextIcon className="w-5 h-5 text-red-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Data Protection Certificate</p>
                          <p className="text-xs text-gray-500">Uploaded 1 week ago</p>
                        </div>
                      </div>
                      <CheckCircleIcon className="w-5 h-5 text-green-500" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white shadow rounded-lg">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-6 text-sm font-medium border-b-2 flex items-center space-x-2 ${
                    activeTab === tab.id
                      ? "border-blue-500 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  <tab.icon className="h-4 w-4" />
                  <span>{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>

          <div className="p-6">
            {activeTab === "programs" && (
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold text-gray-900">Training Programs</h3>
                  <div className="flex space-x-2">
                    <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                      <option>All Categories</option>
                      <option>Leadership</option>
                      <option>Technical Skills</option>
                      <option>Safety</option>
                      <option>Compliance</option>
                    </select>
                    <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                      <option>All Status</option>
                      <option>Active</option>
                      <option>Completed</option>
                      <option>Upcoming</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {trainingPrograms.map((program) => (
                    <div key={program.id} className="bg-white border rounded-lg p-6 hover:shadow-md transition-shadow">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            {getFormatIcon(program.format)}
                            <h4 className="font-semibold text-gray-900">{program.title}</h4>
                          </div>
                          <p className="text-sm text-gray-600 mb-3">{program.description}</p>
                        </div>
                        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(program.status)}`}>
                          {program.status.charAt(0).toUpperCase() + program.status.slice(1)}
                        </span>
                      </div>

                      <div className="space-y-3">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-gray-500">Instructor:</span>
                            <span className="ml-1 text-gray-900">{program.instructor}</span>
                          </div>
                          <div>
                            <span className="text-gray-500">Duration:</span>
                            <span className="ml-1 text-gray-900">{program.duration}</span>
                          </div>
                          <div>
                            <span className="text-gray-500">Format:</span>
                            <span className="ml-1 text-gray-900">{program.format}</span>
                          </div>
                          <div>
                            <span className="text-gray-500">Category:</span>
                            <span className="ml-1 text-gray-900">{program.category}</span>
                          </div>
                        </div>

                        <div>
                          <div className="flex justify-between text-sm mb-1">
                            <span className="text-gray-600">Enrollment</span>
                            <span className="font-medium">
                              {program._count?.enrollments || 0}
                              {program.capacity ? `/${program.capacity}` : ''}
                            </span>
                          </div>
                          {program.capacity && (
                            <div className="bg-gray-200 rounded-full h-2">
                              <div
                                className="bg-orange-500 h-2 rounded-full"
                                style={{ 
                                  width: `${Math.min(((program._count?.enrollments || 0) / program.capacity) * 100, 100)}%` 
                                }}
                              ></div>
                            </div>
                          )}
                        </div>

                        {program.status === "ACTIVE" && program._count?.enrollments > 0 && (
                          <div>
                            <div className="flex justify-between text-sm mb-1">
                              <span className="text-gray-600">Enrollments</span>
                              <span className="font-medium">{program._count?.enrollments || 0} enrolled</span>
                            </div>
                          </div>
                        )}

                        <div className="pt-3 border-t border-gray-100 flex justify-between items-center">
                          <div className="text-sm text-gray-500">
                            {new Date(program.startDate).toLocaleDateString()} - {new Date(program.endDate).toLocaleDateString()}
                          </div>
                          <div className="flex items-center space-x-2">
                            {program.certificationAvailable && (
                              <TrophyIcon className="h-4 w-4 text-yellow-500" title="Certification Available" />
                            )}
                            <button 
                              onClick={() => handleViewProgram(program)}
                              className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                              title="View Program"
                            >
                              <EyeIcon className="h-4 w-4" />
                            </button>
                            <button 
                              onClick={() => handleEditProgram(program)}
                              className="text-gray-600 hover:text-gray-900 p-1 rounded hover:bg-gray-50"
                              title="Edit Program"
                            >
                              <PencilIcon className="h-4 w-4" />
                            </button>
                            <button 
                              onClick={() => {
                                // Simple PDF download for individual program
                                const exportData = {
                                  headers: ['Field', 'Value'],
                                  rows: [
                                    ['Program Title', program.title],
                                    ['Category', program.category],
                                    ['Instructor', program.instructor],
                                    ['Duration', program.duration],
                                    ['Format', program.format],
                                    ['Enrollment', `${program.enrolled}/${program.capacity}`],
                                    ['Start Date', program.startDate],
                                    ['End Date', program.endDate],
                                    ['Status', program.status],
                                    ['Completion Rate', `${program.completion}%`]
                                  ]
                                }
                                
                                // Use the existing export service
                                import('@/lib/export-service').then(({ exportService }) => {
                                  exportService.exportToPDF(exportData, {
                                    filename: `training-program-${program.title.replace(/\s+/g, '-').toLowerCase()}`,
                                    title: `Training Program: ${program.title}`,
                                    format: 'pdf',
                                    includeLogo: true,
                                    includeTimestamp: true,
                                    watermark: true
                                  })
                                })
                              }}
                              className="text-green-600 hover:text-green-900 p-1 rounded hover:bg-gray-50"
                              title="Download Program PDF"
                            >
                              <ArrowDownTrayIcon className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeTab === "enrollments" && (
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold text-gray-900">Training Enrollments</h3>
                  <div className="flex space-x-2">
                    <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                      <option>All Programs</option>
                      <option>Leadership Development Program</option>
                      <option>Data Analysis with Python</option>
                      <option>Workplace Safety Training</option>
                    </select>
                    <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                      <option>All Status</option>
                      <option>Completed</option>
                      <option>In Progress</option>
                      <option>Not Started</option>
                    </select>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Employee</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Program</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Progress</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Enrolled Date</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Expected Completion</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Grade</th>
                        <th className="relative px-6 py-3"><span className="sr-only">Actions</span></th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {enrollments.map((enrollment) => (
                        <tr key={enrollment.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-gray-900">{enrollment.employeeName}</div>
                            <div className="text-sm text-gray-500">{enrollment.employeeId}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {enrollment.program}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                <div
                                  className={`h-2 rounded-full ${
                                    enrollment.progress === 100 ? 'bg-green-500' :
                                    enrollment.progress >= 70 ? 'bg-blue-500' :
                                    enrollment.progress >= 40 ? 'bg-yellow-500' : 'bg-red-500'
                                  }`}
                                  style={{ width: `${enrollment.progress}%` }}
                                ></div>
                              </div>
                              <span className="text-sm text-gray-900">{enrollment.progress}%</span>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getEnrollmentStatusColor(enrollment.status)}`}>
                              {enrollment.status.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {new Date(enrollment.enrollDate).toLocaleDateString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {new Date(enrollment.expectedCompletion).toLocaleDateString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            {enrollment.grade ? (
                              <span className="text-sm font-medium text-gray-900">{enrollment.grade}</span>
                            ) : (
                              <span className="text-sm text-gray-400">Pending</span>
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div className="flex items-center space-x-2">
                              <Link href={`/hr/training/enrollments/${enrollment.id}`}>
                                <button className="text-blue-600 hover:text-blue-900">
                                  <EyeIcon className="h-4 w-4" />
                                </button>
                              </Link>
                              {enrollment.certificateIssued && (
                                <TrophyIcon className="h-4 w-4 text-yellow-500" title="Certificate Issued" />
                              )}
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {activeTab === "certificates" && (
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold text-gray-900">Training Certificates</h3>
                  <div className="flex space-x-2">
                    <input
                      type="text"
                      placeholder="Search certificates..."
                      className="px-3 py-2 border border-gray-300 rounded-md text-sm"
                    />
                    <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                      <option>All Programs</option>
                      <option>Leadership Development</option>
                      <option>Data Analysis</option>
                      <option>Safety Training</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {certificates.map((certificate) => (
                    <div key={certificate.id} className="bg-white border-2 border-yellow-200 rounded-lg p-6 hover:shadow-md transition-shadow">
                      <div className="flex items-center justify-between mb-4">
                        <TrophyIcon className="h-8 w-8 text-yellow-600" />
                        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                          certificate.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {certificate.status.charAt(0).toUpperCase() + certificate.status.slice(1)}
                        </span>
                      </div>

                      <div className="space-y-3">
                        <div>
                          <h4 className="font-semibold text-gray-900">{certificate.program}</h4>
                          <p className="text-sm text-gray-600">{certificate.employeeName}</p>
                        </div>

                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div>
                            <span className="text-gray-500">Grade:</span>
                            <span className="ml-1 font-medium text-gray-900">{certificate.grade}</span>
                          </div>
                          <div>
                            <span className="text-gray-500">Certificate #:</span>
                            <span className="ml-1 font-mono text-xs text-gray-900">{certificate.certificateNumber}</span>
                          </div>
                        </div>

                        <div className="text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-500">Issued:</span>
                            <span className="text-gray-900">{new Date(certificate.issueDate).toLocaleDateString()}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-500">Expires:</span>
                            <span className="text-gray-900">{new Date(certificate.expiryDate).toLocaleDateString()}</span>
                          </div>
                        </div>

                        <div className="pt-3 border-t border-gray-100 flex justify-between items-center">
                          <button className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1">
                            <ArrowDownTrayIcon className="h-4 w-4" />
                          </button>
                          <button className="text-sm text-gray-600 hover:text-gray-800">Verify</button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
        </>
        )}
      </div>

      {/* View Program Modal */}
      <Dialog open={showViewModal} onOpenChange={setShowViewModal}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Training Program Details</DialogTitle>
          </DialogHeader>
          {selectedProgram && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">{selectedProgram.title}</h3>
                  <p className="text-gray-600 mt-2">{selectedProgram.description}</p>
                </div>
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Category:</span>
                    <span className="text-sm font-medium">{selectedProgram.category}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Duration:</span>
                    <span className="text-sm font-medium">{selectedProgram.duration}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Format:</span>
                    <span className="text-sm font-medium">{selectedProgram.format}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Instructor:</span>
                    <span className="text-sm font-medium">{selectedProgram.instructor}</span>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{selectedProgram.enrolled}/{selectedProgram.capacity}</div>
                  <div className="text-sm text-gray-600">Enrolled</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{selectedProgram.completion}%</div>
                  <div className="text-sm text-gray-600">Completion Rate</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {selectedProgram.certificationAvailable ? 'Yes' : 'No'}
                  </div>
                  <div className="text-sm text-gray-600">Certification</div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <span className="text-sm text-gray-500">Start Date:</span>
                  <p className="text-sm font-medium">{new Date(selectedProgram.startDate).toLocaleDateString()}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-500">End Date:</span>
                  <p className="text-sm font-medium">{new Date(selectedProgram.endDate).toLocaleDateString()}</p>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3">
                <Button
                  variant="outline"
                  onClick={() => {
                    // Download detailed program info
                    const exportData = {
                      headers: ['Field', 'Value'],
                      rows: [
                        ['Program Title', selectedProgram.title],
                        ['Description', selectedProgram.description],
                        ['Category', selectedProgram.category],
                        ['Instructor', selectedProgram.instructor],
                        ['Duration', selectedProgram.duration],
                        ['Format', selectedProgram.format],
                        ['Enrollment', `${selectedProgram.enrolled}/${selectedProgram.capacity}`],
                        ['Start Date', selectedProgram.startDate],
                        ['End Date', selectedProgram.endDate],
                        ['Status', selectedProgram.status],
                        ['Completion Rate', `${selectedProgram.completion}%`],
                        ['Certification Available', selectedProgram.certificationAvailable ? 'Yes' : 'No']
                      ]
                    }
                    
                    import('@/lib/export-service').then(({ exportService }) => {
                      exportService.exportToPDF(exportData, {
                        filename: `training-program-${selectedProgram.title.replace(/\s+/g, '-').toLowerCase()}-details`,
                        title: `Training Program Details: ${selectedProgram.title}`,
                        format: 'pdf',
                        includeLogo: true,
                        includeTimestamp: true,
                        watermark: true
                      })
                    })
                  }}
                >
                  <ArrowDownTrayIcon className="h-4 w-4 mr-2" />
                  Download PDF
                </Button>
                <Button
                  onClick={() => {
                    setShowViewModal(false)
                    handleEditProgram(selectedProgram)
                  }}
                >
                  Edit Program
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Program Modal */}
      <Dialog open={showEditModal} onOpenChange={setShowEditModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Training Program</DialogTitle>
          </DialogHeader>
          {selectedProgram && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Program Title *</label>
                  <input
                    type="text"
                    value={editFormData.title || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select
                    value={editFormData.category || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, category: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">Select Category</option>
                    <option value="Leadership">Leadership</option>
                    <option value="Technical Skills">Technical Skills</option>
                    <option value="Safety">Safety</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Compliance">Compliance</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Duration *</label>
                  <input
                    type="text"
                    value={editFormData.duration || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, duration: e.target.value }))}
                    placeholder="e.g., 6 weeks, 3 days"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Format *</label>
                  <select
                    value={editFormData.format || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, format: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">Select Format</option>
                    <option value="Online">Online</option>
                    <option value="In-person">In-person</option>
                    <option value="Hybrid">Hybrid</option>
                    <option value="Blended">Blended</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Capacity *</label>
                  <input
                    type="number"
                    value={editFormData.capacity || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, capacity: parseInt(e.target.value) }))}
                    min="1"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Instructor *</label>
                  <input
                    type="text"
                    value={editFormData.instructor || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, instructor: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select
                    value={editFormData.status || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, status: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="upcoming">Upcoming</option>
                    <option value="active">Active</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                  <input
                    type="date"
                    value={editFormData.startDate || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, startDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                  <input
                    type="date"
                    value={editFormData.endDate || ''}
                    onChange={(e) => setEditFormData(prev => ({ ...prev, endDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  rows={4}
                  value={editFormData.description || ''}
                  onChange={(e) => setEditFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Describe the training program..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="editCertificationAvailable"
                  checked={editFormData.certificationAvailable || false}
                  onChange={(e) => setEditFormData(prev => ({ ...prev, certificationAvailable: e.target.checked }))}
                  className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="editCertificationAvailable" className="ml-2 text-sm text-gray-700">
                  Certification Available upon completion
                </label>
              </div>
              
              <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                <Button
                  variant="outline"
                  onClick={() => setShowEditModal(false)}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleSaveChanges}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  Save Changes
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </ModulePage>
  )
}
