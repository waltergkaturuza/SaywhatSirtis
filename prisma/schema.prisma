// SIRTIS Database Schema - Supabase PostgreSQL Version
// SAYWHAT Integrated Real-Time Information System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  username          String?             @unique
  firstName         String?
  lastName          String?
  role              UserRole            @default(USER)
  roles             String[]            @default([])
  department        String?
  position          String?
  isActive          Boolean             @default(true)
  lastLogin         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Profile Information
  phoneNumber       String?
  profileImage      String?
  bio               String?
  location          String?
  
  // Security
  emailVerified     DateTime?
  twoFactorEnabled  Boolean             @default(false)
  
  // Relationships
  accounts          Account[]
  sessions          Session[]
  auditLogs         AuditLog[]
  createdProjects   Project[]           @relation("ProjectCreator")
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// =============================================
// AUDIT & LOGGING
// =============================================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("audit_logs")
}

// =============================================
// PROGRAMS MANAGEMENT
// =============================================

model Project {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  status          ProjectStatus @default(PLANNING)
  priority        ProjectPriority @default(MEDIUM)
  progress        Int       @default(0)
  startDate       DateTime?
  endDate         DateTime?
  timeframe       String?
  country         String?
  province        String?
  budget          Float?
  actualSpent     Float     @default(0)
  currency        String    @default("USD")
  
  // Enhanced project data stored as JSON
  objectives      Json?     // Contains categories, implementing orgs, results framework, etc.
  
  // Relationships
  creatorId       String?
  creator         User?     @relation("ProjectCreator", fields: [creatorId], references: [id])
  activities      Activity[] // Temporarily commented until activities table is created
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([status])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
  @@index([country])
  @@map("projects")
}

// Temporarily commented until activities table can be created
model Activity {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  status      String    @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([status])
  @@index([dueDate])
  @@index([projectId])
  @@map("activities")
}

// =============================================
// CALL CENTRE MANAGEMENT
// =============================================

model CallRecord {
  id              String    @id @default(cuid())
  caseNumber      String    @unique
  callerName      String
  callerPhone     String
  callerEmail     String?
  callType        CallDirection   // "inbound", "outbound"
  category        CallType   // "inquiry", "complaint", "emergency", etc.
  priority        CallPriority @default(MEDIUM)
  status          CallStatus @default(OPEN)
  assignedOfficer String?
  
  // Call Details
  summary         String?   @db.Text
  notes           String?   @db.Text
  resolution      String?   @db.Text
  satisfactionRating Int?
  
  // Timestamps
  callStartTime   DateTime
  callEndTime     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resolvedAt      DateTime?
  
  // Location
  district        String?
  ward            String?
  
  // Follow-up
  followUpRequired Boolean  @default(false)
  followUpDate    DateTime?
  
  @@index([caseNumber])
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([assignedOfficer])
  @@index([callStartTime])
  @@map("call_records")
}

// =============================================
// HR MANAGEMENT
// =============================================

model Employee {
  id              String    @id @default(cuid())
  employeeId      String    @unique
  firstName       String
  lastName        String
  email           String    @unique
  phoneNumber     String?
  position        String
  department      String
  hireDate        DateTime
  salary          Float?
  status          EmployeeStatus @default(ACTIVE)
  
  // Personal Information
  dateOfBirth     DateTime?
  nationalId      String?   @unique
  address         String?
  emergencyContact String?
  
  // Employment Details
  contractType    String?   // "permanent", "contract", "intern"
  reportingTo     String?
  workLocation    String?
  
  // HR Records
  performanceReviews PerformanceReview[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([employeeId])
  @@index([department])
  @@index([status])
  @@index([email])
  @@map("employees")
}

model PerformanceReview {
  id            String    @id @default(cuid())
  employeeId    String
  reviewPeriod  String    // "Q1 2024", "Annual 2024", etc.
  reviewType    String    // "quarterly", "annual", "probationary"
  overallRating Float?
  goals         Json?     // Array of goals and achievements
  feedback      String?   @db.Text
  reviewDate    DateTime
  nextReviewDate DateTime?
  
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([employeeId])
  @@index([reviewDate])
  @@map("performance_reviews")
}

// =============================================
// INVENTORY MANAGEMENT
// =============================================

model Asset {
  id              String    @id @default(cuid())
  assetTag        String    @unique
  name            String
  category        AssetCategory // "IT Equipment", "Furniture", "Vehicle", etc.
  description     String?   @db.Text
  serialNumber    String?
  model           String?
  manufacturer    String?
  purchaseDate    DateTime?
  purchasePrice   Float?
  currentValue    Float?
  status          AssetStatus @default(ACTIVE) // "active", "maintenance", "disposed"
  location        String?
  assignedTo      String?   // Employee ID or department
  
  // Maintenance
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  warrantyExpiry  DateTime?
  
  // Tracking
  rfidTag         String?   @unique
  qrCode          String?   @unique
  
  // Records
  maintenanceRecords MaintenanceRecord[]
  auditRecords    AssetAudit[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([assetTag])
  @@index([category])
  @@index([status])
  @@index([location])
  @@map("assets")
}

model MaintenanceRecord {
  id              String    @id @default(cuid())
  assetId         String
  maintenanceType String    // "preventive", "corrective", "emergency"
  description     String?   @db.Text
  cost            Float?
  performedBy     String?
  performedDate   DateTime
  nextDueDate     DateTime?
  
  asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([assetId])
  @@index([performedDate])
  @@map("maintenance_records")
}

model AssetAudit {
  id              String    @id @default(cuid())
  assetId         String
  auditDate       DateTime
  condition       String    // "excellent", "good", "fair", "poor"
  notes           String?   @db.Text
  auditedBy       String?
  
  asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([assetId])
  @@index([auditDate])
  @@map("asset_audits")
}

// =============================================
// DOCUMENT MANAGEMENT
// =============================================

model Document {
  id              String    @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  size            Int
  path            String    // File storage path
  url             String?   // Public URL if applicable
  category        DocumentCategory? // "policy", "report", "form", etc.
  tags            String[]  @default([])
  
  // AI Search Integration
  extractedText   String?   @db.Text
  summary         String?   @db.Text
  searchKeywords  String[]  @default([])
  
  // Access Control
  isPublic        Boolean   @default(false)
  accessLevel     String    @default("internal") // "public", "internal", "restricted"
  
  // Metadata
  uploadedBy      String?
  version         String    @default("1.0")
  description     String?   @db.Text
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([category])
  @@index([uploadedBy])
  @@index([isPublic])
  @@map("documents")
}

// =============================================
// EVENTS MANAGEMENT
// =============================================

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  type            String    // "flagship", "training", "meeting", etc.
  status          String    @default("planning") // "planning", "approved", "in-progress", "completed", "cancelled"
  startDate       DateTime
  endDate         DateTime?
  location        String?
  venue           String?
  capacity        Int?
  
  // Event Details
  agenda          Json?     // Event agenda/program
  speakers        Json?     // Speaker information
  budget          Float?
  actualCost      Float     @default(0)
  
  // Registration
  requiresRegistration Boolean @default(false)
  registrationDeadline DateTime?
  registrations   EventRegistration[]
  
  // Implementation Partners
  partners        Json?     // Implementation partners data
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([type])
  @@index([status])
  @@index([startDate])
  @@map("events")
}

model EventRegistration {
  id              String    @id @default(cuid())
  eventId         String
  participantName String
  participantEmail String
  participantPhone String?
  organization    String?
  position        String?
  specialRequirements String? @db.Text
  status          String    @default("pending") // "pending", "confirmed", "cancelled"
  
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  registeredAt    DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([eventId, participantEmail])
  @@index([eventId])
  @@index([status])
  @@map("event_registrations")
}

// =============================================
// SYSTEM CONFIGURATION
// =============================================

model SystemConfig {
  id              String    @id @default(cuid())
  key             String    @unique
  value           Json
  description     String?
  category        String?   // "general", "security", "integrations"
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([category])
  @@map("system_config")
}

// =============================================
// NOTIFICATIONS
// =============================================

model Notification {
  id              String    @id @default(cuid())
  userId          String?
  type            NotificationType @default(INFO) // "info", "warning", "error", "success"
  title           String
  message         String    @db.Text
  isRead          Boolean   @default(false)
  actionUrl       String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// =============================================
// ENUMS
// =============================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  HR_MANAGER
  PROJECT_MANAGER
  CALL_CENTRE_AGENT
  EMPLOYEE
  USER
}

enum AuditLogSeverity {
  LOW
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CallType {
  INQUIRY
  COMPLAINT
  REQUEST
  EMERGENCY
  FEEDBACK
  OTHER
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  SPAM
}

enum DocumentCategory {
  PROJECT
  HR
  FINANCE
  LEGAL
  TRAINING
  POLICY
  REPORT
  OTHER
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AssetCategory {
  COMPUTER
  FURNITURE
  VEHICLE
  EQUIPMENT
  OTHER
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  DISPOSED
  LOST
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
