generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model activities {
  id          String    @id
  title       String
  description String?
  status      String    @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  projects    projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([dueDate])
  @@index([projectId])
  @@index([status])
}

model asset_audits {
  id        String   @id
  assetId   String
  auditDate DateTime
  condition String
  notes     String?
  auditedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  assets    assets   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([auditDate])
}

model assets {
  id                  String                @id
  assetTag            String                @unique
  name                String
  description         String?
  category            String
  brand               String?
  model               String?
  serialNumber        String?
  purchaseDate        DateTime?
  purchasePrice       Float?
  currentValue        Float?
  location            String?
  condition           AssetCondition        @default(GOOD)
  status              String                @default("ACTIVE")
  warrantyExpiry      DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  asset_audits        asset_audits[]
  maintenance_records maintenance_records[]

  @@index([assetTag])
  @@index([category])
  @@index([location])
  @@index([status])
}

model audit_logs {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  users      users?   @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId])
}

model batch_analyses {
  id           String   @id
  userId       String
  documentIds  String[]
  analysisType String
  results      Json
  createdAt    DateTime @default(now())
  users        users    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
}

model call_records {
  id                 String    @id
  caseNumber         String    @unique
  callerName         String
  callerPhone        String?
  callerEmail        String?
  callType           String?   @default("INBOUND")
  category           String?   @default("INQUIRY")
  priority           String?   @default("MEDIUM")
  status             String?   @default("OPEN")
  subject            String
  description        String?
  assignedOfficer    String?
  summary            String?
  notes              String?
  resolution         String?
  satisfactionRating Int?
  callStartTime      DateTime?
  callEndTime        DateTime?
  resolvedAt         DateTime?
  district           String?
  ward               String?
  followUpRequired   Boolean   @default(false)
  followUpDate       DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime

  @@index([assignedOfficer])
  @@index([callStartTime])
  @@index([caseNumber])
  @@index([category])
  @@index([priority])
  @@index([status])
}

model departments {
  id                String        @id
  name              String        @unique
  description       String?
  budget            Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  code              String?       @unique
  location          String?
  manager           String?
  status            String        @default("ACTIVE")
  parentId          String?
  level             Int           @default(0)
  parent            departments?  @relation("departmentsTodepartments", fields: [parentId], references: [id])
  subunits          departments[] @relation("departmentsTodepartments")
  documents         documents[]
  employees         employees[]

  @@index([level])
  @@index([name])
  @@index([parentId])
  @@index([status])
}

model document_activities {
  id         String    @id
  documentId String
  userId     String
  action     String
  details    Json?
  createdAt  DateTime  @default(now())
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([documentId])
  @@index([userId])
}

model document_analysis {
  id                   String    @id
  documentId           String    @unique
  sentiment            Json
  readability          Json
  quality              Json
  keyPhrases           String[]
  summary              String?
  topics               String[]
  language             String?
  wordCount            Int?
  estimatedReadingTime Int?
  analyzedAt           DateTime  @default(now())
  analyzedBy           String?
  users                users?    @relation(fields: [analyzedBy], references: [id])
  documents            documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([analyzedAt])
  @@index([language])
}

model document_audit_logs {
  id         String              @id
  documentId String
  userId     String
  userEmail  String?
  action     DocumentAuditAction
  details    Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  timestamp  DateTime            @default(now())
  documents  documents           @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([documentId])
  @@index([timestamp])
  @@index([userId])
}

model document_classification_ai {
  id               String    @id
  documentId       String    @unique
  category         String
  confidence       Float
  tags             String[]
  securityLevel    String?
  reasons          String[]
  suggestedActions String[]
  classifiedAt     DateTime  @default(now())
  classifiedBy     String?
  users            users?    @relation(fields: [classifiedBy], references: [id])
  documents        documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([classifiedAt])
}

model document_comments {
  id                      String              @id
  documentId              String
  userId                  String
  content                 String
  isResolved              Boolean             @default(false)
  parentId                String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime
  documents               documents           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  document_comments       document_comments?  @relation("document_commentsTodocument_comments", fields: [parentId], references: [id])
  other_document_comments document_comments[] @relation("document_commentsTodocument_comments")

  @@index([documentId])
  @@index([parentId])
  @@index([userId])
}

model document_content {
  id         String    @id
  documentId String
  content    String
  version    Int       @default(1)
  createdAt  DateTime  @default(now())
  createdBy  String?
  users      users?    @relation(fields: [createdBy], references: [id])
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@index([documentId])
}

model document_favorites {
  id         String    @id
  documentId String
  userId     String
  addedAt    DateTime  @default(now())
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@index([userId])
}

model document_folders {
  id                     String                 @id
  name                   String
  description            String?
  path                   String
  parentId               String?
  level                  Int                    @default(0)
  isPublic               Boolean                @default(false)
  ownerId                String
  department             String?
  projectId              String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  document_folders       document_folders?      @relation("document_foldersTodocument_folders", fields: [parentId], references: [id])
  other_document_folders document_folders[]     @relation("document_foldersTodocument_folders")
  document_permissions   document_permissions[]

  @@index([department])
  @@index([name])
  @@index([ownerId])
  @@index([parentId])
  @@index([projectId])
}

model document_permissions {
  id               String                 @id
  documentId       String?
  folderId         String?
  userId           String?
  userEmail        String?
  groupId          String?
  permission       DocumentPermissionType
  grantedBy        String
  grantedAt        DateTime               @default(now())
  expiresAt        DateTime?
  isInherited      Boolean                @default(false)
  documents        documents?             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  document_folders document_folders?      @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([folderId])
  @@index([permission])
  @@index([userEmail])
  @@index([userId])
}

model document_shares {
  id              String                 @id
  documentId      String
  sharedBy        String
  sharedWith      String?
  sharedWithEmail String?
  permission      DocumentPermissionType
  shareToken      String?                @unique
  expiresAt       DateTime?
  isActive        Boolean                @default(true)
  accessCount     Int                    @default(0)
  lastAccessedAt  DateTime?
  message         String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime
  documents       documents              @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([expiresAt])
  @@index([shareToken])
  @@index([sharedBy])
  @@index([sharedWith])
}

model document_templates {
  id          String   @id
  name        String
  description String?
  category    String
  template    Json
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([isActive])
}

model document_workflow_tasks {
  id          String                   @id
  documentId  String
  taskType    DocumentWorkflowTaskType
  assignedTo  String
  assignedBy  String
  title       String
  description String?
  status      TaskStatus               @default(PENDING)
  priority    TaskPriority             @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  comments    String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime
  documents   documents                @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([assignedTo])
  @@index([documentId])
  @@index([dueDate])
  @@index([status])
  @@index([taskType])
}

model documents {
  id                         String                      @id
  filename                   String
  originalName               String
  path                       String
  url                        String?
  mimeType                   String
  size                       Int
  category                   DocumentCategory?
  description                String?
  summary                    String?
  extractedText              String?
  ocrText                    String?
  searchKeywords             String[]                    @default([])
  tags                       String[]                    @default([])
  version                    String                      @default("1.0")
  versionComment             String?
  isLatestVersion            Boolean                     @default(true)
  parentDocumentId           String?
  classification             DocumentClassification      @default(PUBLIC)
  accessLevel                String                      @default("internal")
  isPublic                   Boolean                     @default(false)
  isCheckedOut               Boolean                     @default(false)
  checkedOutBy               String?
  checkedOutAt               DateTime?
  lockExpiresAt              DateTime?
  author                     String?
  department                 String?
  departmentId               String?
  projectId                  String?
  customMetadata             Json?
  approvalStatus             DocumentApprovalStatus      @default(DRAFT)
  approvedBy                 String?
  approvedAt                 DateTime?
  reviewStatus               DocumentReviewStatus        @default(PENDING)
  sentimentScore             Float?
  readabilityScore           Float?
  qualityScore               Float?
  keyPhrases                 String[]                    @default([])
  aiSummary                  String?
  uploadedBy                 String?
  viewCount                  Int                         @default(0)
  downloadCount              Int                         @default(0)
  lastAccessedAt             DateTime?
  lastAccessedBy             String?
  retentionPeriod            Int?
  archiveDate                DateTime?
  isArchived                 Boolean                     @default(false)
  isDeleted                  Boolean                     @default(false)
  deletedAt                  DateTime?
  deletedBy                  String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  document_activities        document_activities[]
  document_analysis          document_analysis?
  document_audit_logs        document_audit_logs[]
  document_classification_ai document_classification_ai?
  document_comments          document_comments[]
  document_content           document_content[]
  document_favorites         document_favorites[]
  document_permissions       document_permissions[]
  document_shares            document_shares[]
  document_workflow_tasks    document_workflow_tasks[]
  departments                departments?                @relation(fields: [departmentId], references: [id])
  documents                  documents?                  @relation("documentsTodocuments", fields: [parentDocumentId], references: [id])
  other_documents            documents[]                 @relation("documentsTodocuments")
  projects                   projects?                   @relation(fields: [projectId], references: [id])

  @@index([approvalStatus])
  @@index([category])
  @@index([checkedOutBy])
  @@index([classification])
  @@index([createdAt])
  @@index([department])
  @@index([filename])
  @@index([isArchived])
  @@index([isCheckedOut])
  @@index([isDeleted])
  @@index([isPublic])
  @@index([lastAccessedAt])
  @@index([projectId])
  @@index([reviewStatus])
  @@index([uploadedBy])
}

model employees {
  id                   String                 @id
  userId               String                 @unique
  employeeId           String                 @unique
  firstName            String
  lastName             String
  middleName           String?
  dateOfBirth          DateTime?
  gender               String?
  nationality          String?
  nationalId           String?                @unique
  passportNumber       String?
  email                String                 @unique
  phoneNumber          String?
  alternativePhone     String?
  address              String?
  emergencyContact     String?
  emergencyPhone       String?
  department           String?
  position             String
  employmentType       String                 @default("FULL_TIME")
  startDate            DateTime
  endDate              DateTime?
  salary               Float?
  currency             String?                @default("USD")
  status               String                 @default("ACTIVE")
  supervisor_id        String?
  is_supervisor        Boolean                @default(false)
  is_reviewer          Boolean                @default(false)
  medical_aid          Boolean                @default(false)
  funeral_cover        Boolean                @default(false)
  vehicle_benefit      Boolean                @default(false)
  fuel_allowance       Boolean                @default(false)
  airtime_allowance    Boolean                @default(false)
  other_benefits       String[]               @default([])
  archived_at          DateTime?
  archive_reason       String?
  access_revoked       Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  hireDate             DateTime?
  departmentId         String?
  departments          departments?           @relation(fields: [departmentId], references: [id])
  employees            employees?             @relation("employeesToemployees", fields: [supervisor_id], references: [id])
  other_employees      employees[]            @relation("employeesToemployees")
  performance_reviews  performance_reviews[]
  training_attendance  training_attendance[]
  training_enrollments training_enrollments[]

  @@index([archived_at])
  @@index([department])
  @@index([email])
  @@index([employeeId])
  @@index([is_reviewer])
  @@index([is_supervisor])
  @@index([status])
  @@index([supervisor_id])
}

model event_registrations {
  id                  String   @id
  eventId             String
  participantName     String
  participantEmail    String
  participantPhone    String?
  organization        String?
  position            String?
  specialRequirements String?
  status              String   @default("pending")
  registeredAt        DateTime @default(now())
  updatedAt           DateTime
  events              events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantEmail])
  @@index([eventId])
  @@index([status])
}

model events {
  id                   String                @id
  title                String
  description          String?
  type                 String
  status               String                @default("planning")
  startDate            DateTime
  endDate              DateTime?
  location             String?
  venue                String?
  capacity             Int?
  agenda               Json?
  speakers             Json?
  budget               Float?
  actualCost           Float                 @default(0)
  requiresRegistration Boolean               @default(false)
  registrationDeadline DateTime?
  partners             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  event_registrations  event_registrations[]

  @@index([startDate])
  @@index([status])
  @@index([type])
}

model maintenance_records {
  id              String    @id
  assetId         String
  description     String?
  cost            Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  nextDueDate     DateTime?
  performedBy     String?
  performedDate   DateTime
  maintenanceType String
  assets          assets    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([performedDate])
}

model notifications {
  id        String           @id
  userId    String?
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime

  @@index([createdAt])
  @@index([isRead])
  @@index([userId])
}

model performance_reviews {
  id             String    @id
  employeeId     String
  reviewPeriod   String
  reviewType     String
  overallRating  Float?
  goals          Json?
  feedback       String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  employees      employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([reviewDate])
}

model projects {
  id                              String       @id
  name                            String
  description                     String?
  objectives                      Json?
  timeframe                       String?
  startDate                       DateTime?
  endDate                         DateTime?
  country                         String?
  province                        String?
  budget                          Float?
  actualSpent                     Float?       @default(0)
  status                          String       @default("PLANNING")
  priority                        String       @default("MEDIUM")
  progress                        Int?         @default(0)
  managerId                       String?
  createdAt                       DateTime     @default(now())
  updatedAt                       DateTime
  currency                        String?      @default("USD")
  creatorId                       String?
  activities                      activities[]
  documents                       documents[]
  users_projects_creatorIdTousers users?       @relation("projects_creatorIdTousers", fields: [creatorId], references: [id])
  users_projects_managerIdTousers users?       @relation("projects_managerIdTousers", fields: [managerId], references: [id])

  @@index([status])
}

model risk_assessments {
  id                                       String           @id
  riskId                                   String
  assessmentDate                           DateTime         @default(now())
  assessorId                               String?
  previousProbability                      RiskProbability?
  previousImpact                           RiskImpact?
  newProbability                           RiskProbability
  newImpact                                RiskImpact
  newRiskScore                             Int
  reasoning                                String?
  evidence                                 String?
  recommendations                          String?
  status                                   String           @default("SUBMITTED")
  reviewedAt                               DateTime?
  reviewerId                               String?
  reviewComments                           String?
  createdAt                                DateTime         @default(now())
  updatedAt                                DateTime
  users_risk_assessments_assessorIdTousers users?           @relation("risk_assessments_assessorIdTousers", fields: [assessorId], references: [id])
  users_risk_assessments_reviewerIdTousers users?           @relation("risk_assessments_reviewerIdTousers", fields: [reviewerId], references: [id])
  risks                                    risks            @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model risk_audit_logs {
  id          String   @id
  riskId      String
  action      String
  field       String?
  oldValue    String?
  newValue    String?
  userId      String?
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  description String?
  risks       risks    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  users       users?   @relation(fields: [userId], references: [id])
}

model risk_documents {
  id           String   @id
  riskId       String
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  filePath     String
  description  String?
  documentType String   @default("SUPPORTING")
  uploadedById String?
  uploadedAt   DateTime @default(now())
  risks        risks    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  users        users?   @relation(fields: [uploadedById], references: [id])
}

model risk_mitigations {
  id                                        String           @id
  riskId                                    String
  strategy                                  String
  controlMeasure                            String?
  ownerId                                   String?
  deadline                                  DateTime?
  implementationProgress                    Int              @default(0)
  status                                    MitigationStatus @default(PLANNED)
  milestones                                Json?
  lastUpdated                               DateTime
  completedAt                               DateTime?
  notes                                     String?
  createdAt                                 DateTime         @default(now())
  updatedAt                                 DateTime
  createdById                               String?
  users_risk_mitigations_createdByIdTousers users?           @relation("risk_mitigations_createdByIdTousers", fields: [createdById], references: [id])
  users_risk_mitigations_ownerIdTousers     users?           @relation("risk_mitigations_ownerIdTousers", fields: [ownerId], references: [id])
  risks                                     risks            @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model risk_notifications {
  id        String    @id
  userId    String
  type      String
  title     String
  message   String
  riskId    String?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  users     users     @relation(fields: [userId], references: [id])
}

model risks {
  id                             String             @id
  riskId                         String             @unique
  title                          String
  description                    String
  category                       RiskCategory
  department                     String?
  probability                    RiskProbability
  impact                         RiskImpact
  riskScore                      Int
  status                         RiskStatus         @default(OPEN)
  dateIdentified                 DateTime           @default(now())
  lastAssessed                   DateTime?
  ownerId                        String?
  tags                           String[]           @default([])
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime
  createdById                    String?
  risk_assessments               risk_assessments[]
  risk_audit_logs                risk_audit_logs[]
  risk_documents                 risk_documents[]
  risk_mitigations               risk_mitigations[]
  users_risks_createdByIdTousers users?             @relation("risks_createdByIdTousers", fields: [createdById], references: [id])
  users_risks_ownerIdTousers     users?             @relation("risks_ownerIdTousers", fields: [ownerId], references: [id])
}

model search_logs {
  id           String   @id
  userId       String
  query        String
  resultsCount Int
  searchTime   Int
  filters      Json?
  searchType   String
  createdAt    DateTime @default(now())
  users        users    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([searchType])
  @@index([userId])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model system_config {
  id          String   @id
  key         String   @unique
  value       Json
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
}

model training_attendance {
  id                String            @id
  sessionId         String
  employeeId        String
  status            String
  checkInTime       DateTime?
  checkOutTime      DateTime?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  employees         employees         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training_sessions training_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, employeeId])
  @@index([employeeId])
}

model training_certificates {
  id                   String               @id
  enrollmentId         String               @unique
  certificateNumber    String               @unique
  issuedDate           DateTime
  expiryDate           DateTime?
  isValid              Boolean              @default(true)
  downloadCount        Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  training_enrollments training_enrollments @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([certificateNumber])
  @@index([issuedDate])
}

model training_enrollments {
  id                    String                 @id
  employeeId            String
  enrollmentDate        DateTime               @default(now())
  completionDate        DateTime?
  attendanceRate        Float?
  createdAt             DateTime               @default(now())
  feedback              String?
  finalScore            Float?
  programId             String
  progress              Int                    @default(0)
  updatedAt             DateTime
  status                String                 @default("ENROLLED")
  training_certificates training_certificates?
  employees             employees              @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training_programs     training_programs      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, employeeId])
  @@index([employeeId])
  @@index([status])
}

model training_programs {
  id                     String                 @id
  title                  String
  description            String?
  category               String
  duration               String
  format                 String
  capacity               Int?
  instructor             String?
  status                 String                 @default("DRAFT")
  startDate              DateTime?
  endDate                DateTime?
  enrollmentDeadline     DateTime?
  certificationAvailable Boolean                @default(false)
  prerequisites          String?
  learningObjectives     Json?
  materials              Json?
  cost                   Float?                 @default(0)
  currency               String?                @default("USD")
  location               String?
  onlineLink             String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  training_enrollments   training_enrollments[]
  training_sessions      training_sessions[]

  @@index([category])
  @@index([startDate])
  @@index([status])
}

model training_sessions {
  id                  String                @id
  programId           String
  title               String
  description         String?
  sessionDate         DateTime
  startTime           String
  endTime             String
  instructor          String?
  location            String?
  onlineLink          String?
  materials           Json?
  maxAttendees        Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  training_attendance training_attendance[]
  training_programs   training_programs     @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@index([sessionDate])
}

model users {
  id                                                   String                       @id
  email                                                String                       @unique
  username                                             String?                      @unique
  role                                                 UserRole                     @default(USER)
  department                                           String?
  position                                             String?
  isActive                                             Boolean                      @default(true)
  lastLogin                                            DateTime?
  createdAt                                            DateTime                     @default(now())
  updatedAt                                            DateTime
  emailVerified                                        DateTime?
  firstName                                            String?
  lastName                                             String?
  roles                                                String[]                     @default([])
  phoneNumber                                          String?
  profileImage                                         String?
  bio                                                  String?
  location                                             String?
  twoFactorEnabled                                     Boolean                      @default(false)
  accounts                                             accounts[]
  audit_logs                                           audit_logs[]
  batch_analyses                                       batch_analyses[]
  document_activities                                  document_activities[]
  document_analysis                                    document_analysis[]
  document_classification_ai                           document_classification_ai[]
  document_content                                     document_content[]
  projects_projects_creatorIdTousers                   projects[]                   @relation("projects_creatorIdTousers")
  projects_projects_managerIdTousers                   projects[]                   @relation("projects_managerIdTousers")
  risk_assessments_risk_assessments_assessorIdTousers  risk_assessments[]           @relation("risk_assessments_assessorIdTousers")
  risk_assessments_risk_assessments_reviewerIdTousers  risk_assessments[]           @relation("risk_assessments_reviewerIdTousers")
  risk_audit_logs                                      risk_audit_logs[]
  risk_documents                                       risk_documents[]
  risk_mitigations_risk_mitigations_createdByIdTousers risk_mitigations[]           @relation("risk_mitigations_createdByIdTousers")
  risk_mitigations_risk_mitigations_ownerIdTousers     risk_mitigations[]           @relation("risk_mitigations_ownerIdTousers")
  risk_notifications                                   risk_notifications[]
  risks_risks_createdByIdTousers                       risks[]                      @relation("risks_createdByIdTousers")
  risks_risks_ownerIdTousers                           risks[]                      @relation("risks_ownerIdTousers")
  search_logs                                          search_logs[]
  sessions                                             sessions[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssetCategory {
  COMPUTER
  FURNITURE
  VEHICLE
  EQUIPMENT
  OTHER
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  DISPOSED
  LOST
}

enum AuditLogSeverity {
  LOW
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  SPAM
}

enum CallType {
  INQUIRY
  COMPLAINT
  REQUEST
  EMERGENCY
  FEEDBACK
  OTHER
}

enum DocumentApprovalStatus {
  DRAFT
  PENDING_REVIEW
  UNDER_REVIEW
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PUBLISHED
}

enum DocumentAuditAction {
  CREATED
  VIEWED
  DOWNLOADED
  EDITED
  DELETED
  RESTORED
  SHARED
  UNSHARED
  FAVORITED
  UNFAVORITED
  COMMENTED
  CHECKED_OUT
  CHECKED_IN
  APPROVED
  REJECTED
  CLASSIFIED
  PERMISSIONS_CHANGED
  MOVED
  COPIED
  ARCHIVED
  UNARCHIVED
}

enum DocumentCategory {
  POLICY
  PROCEDURE
  FORM
  REPORT
  CONTRACT
  INVOICE
  PRESENTATION
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  ARCHIVE
  OTHER
}

enum DocumentClassification {
  PUBLIC
  INTERNAL
  CONFIDENTIAL
  RESTRICTED
  TOP_SECRET
}

enum DocumentPermissionType {
  VIEW
  COMMENT
  EDIT
  DOWNLOAD
  SHARE
  DELETE
  ADMIN
}

enum DocumentReviewStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REQUIRES_CHANGES
  REJECTED
}

enum DocumentWorkflowTaskType {
  REVIEW
  APPROVE
  EDIT
  TRANSLATE
  DESIGN
  LEGAL_REVIEW
  COMPLIANCE_CHECK
  PUBLISH
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum MitigationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum RiskCategory {
  OPERATIONAL
  STRATEGIC
  FINANCIAL
  COMPLIANCE
  REPUTATIONAL
  ENVIRONMENTAL
  CYBERSECURITY
  HR_PERSONNEL
}

enum RiskImpact {
  LOW
  MEDIUM
  HIGH
}

enum RiskProbability {
  LOW
  MEDIUM
  HIGH
}

enum RiskStatus {
  OPEN
  MITIGATED
  ESCALATED
  CLOSED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  HR_MANAGER
  PROJECT_MANAGER
  CALL_CENTRE_AGENT
  EMPLOYEE
  USER
}
