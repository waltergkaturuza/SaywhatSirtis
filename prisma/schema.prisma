generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model activities {
  id          String    @id
  title       String
  description String?
  status      String    @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  projects    projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([dueDate])
  @@index([projectId])
  @@index([status])
}

model asset_audits {
  id        String   @id
  assetId   String
  auditDate DateTime
  condition String
  notes     String?
  auditedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  assets    assets   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([auditDate])
}

model assets {
  id                  String                @id
  assetTag            String                @unique
  name                String
  description         String?
  category            String
  brand               String?
  model               String?
  serialNumber        String?
  purchaseDate        DateTime?
  purchasePrice       Float?
  currentValue        Float?
  location            String?
  condition           AssetCondition        @default(GOOD)
  status              String                @default("ACTIVE")
  warrantyExpiry      DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  assetType           String?
  assignedEmail       String?
  assignedTo          String?
  barcodeId           String?
  department          String?
  depreciationMethod  String?               @default("straight-line")
  depreciationRate    Float?                @default(0)
  documents           String[]              @default([])
  fundingSource       String?
  images              String[]              @default([])
  insurancePolicy     String?
  insuranceValue      Float?
  qrCode              String?
  rfidTag             String?
  asset_audits        asset_audits[]
  maintenance_records maintenance_records[]
  audits              Audit[]               @relation("AuditAssets")

  @@index([assetTag])
  @@index([category])
  @@index([location])
  @@index([status])
  @@index([department])
  @@index([assignedTo])
  @@index([fundingSource])
  @@index([rfidTag])
  @@index([qrCode])
  @@index([barcodeId])
}

model Audit {
  id              String      @id @default(uuid())
  name            String
  type            AuditType
  status          AuditStatus @default(PENDING)
  scheduledDate   DateTime
  completedDate   DateTime?
  auditor         String
  description     String?
  findings        String[]    @default([])
  recommendations String[]    @default([])
  progress        Int?        @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  documents       String[]    @default([])
  assets          assets[]    @relation("AuditAssets")

  @@index([status])
  @@index([type])
  @@index([scheduledDate])
  @@index([auditor])
}

model audit_logs {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  users      users?   @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId])
}

model batch_analyses {
  id           String   @id
  userId       String
  documentIds  String[]
  analysisType String
  results      Json
  createdAt    DateTime @default(now())
  users        users    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
}

model call_records {
  id                   String    @id
  caseNumber           String    @unique
  callNumber           String?
  officerName          String?
  callerName           String
  callerPhone          String?
  callerEmail          String?
  callerAge            String?
  callerGender         String?
  callerKeyPopulation  String?
  callerProvince       String?
  callerAddress        String?
  callType             String?   @default("INBOUND")
  modeOfCommunication  String?
  howDidYouHearAboutUs String?
  callValidity         String?   @default("valid")
  newOrRepeatCall      String?   @default("new")
  language             String?   @default("English")
  callDescription      String?
  purpose              String?   @default("HIV/AIDS")
  isCase               String?   @default("NO")
  clientName           String?
  clientAge            String?
  clientSex            String?
  clientAddress        String?
  clientProvince       String?
  perpetrator          String?
  servicesRecommended  String?
  referral             String?
  voucherIssued        String?   @default("NO")
  voucherValue         String?
  comment              String?
  category             String?   @default("INQUIRY")
  priority             String?   @default("MEDIUM")
  status               String?   @default("OPEN")
  subject              String
  description          String?
  assignedOfficer      String?
  summary              String?
  notes                String?
  resolution           String?
  satisfactionRating   Int?
  callStartTime        DateTime?
  callEndTime          DateTime?
  resolvedAt           DateTime?
  district             String?
  ward                 String?
  followUpRequired     Boolean   @default(false)
  followUpDate         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime

  @@index([assignedOfficer])
  @@index([callStartTime])
  @@index([caseNumber])
  @@index([category])
  @@index([priority])
  @@index([status])
}

model departments {
  id                String        @id
  name              String        @unique
  description       String?
  budget            Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  code              String?       @unique
  location          String?
  manager           String?
  status            String        @default("ACTIVE")
  parentId          String?
  level             Int           @default(0)
  isActive          Boolean       @default(true)
  departments       departments?  @relation("departmentsTodepartments", fields: [parentId], references: [id])
  other_departments departments[] @relation("departmentsTodepartments")
  documents         documents[]
  employees         employees[]

  @@index([level])
  @@index([name])
  @@index([parentId])
  @@index([status])
}

model development_plans {
  id          String    @id
  goal        String
  description String?
  targetDate  DateTime?
  status      String    @default("pending")
  progress    Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime

  @@index([status])
  @@index([targetDate])
}

model document_activities {
  id         String    @id
  documentId String
  userId     String
  action     String
  details    Json?
  createdAt  DateTime  @default(now())
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([documentId])
  @@index([userId])
}

model document_analysis {
  id                   String    @id
  documentId           String    @unique
  sentiment            Json
  readability          Json
  quality              Json
  keyPhrases           String[]
  summary              String?
  topics               String[]
  language             String?
  wordCount            Int?
  estimatedReadingTime Int?
  analyzedAt           DateTime  @default(now())
  analyzedBy           String?
  users                users?    @relation(fields: [analyzedBy], references: [id])
  documents            documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([analyzedAt])
  @@index([language])
}

model document_audit_logs {
  id         String              @id
  documentId String
  userId     String
  userEmail  String?
  action     DocumentAuditAction
  details    Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  timestamp  DateTime            @default(now())
  documents  documents           @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([documentId])
  @@index([timestamp])
  @@index([userId])
}

model document_classification_ai {
  id               String    @id
  documentId       String    @unique
  category         String
  confidence       Float
  tags             String[]
  securityLevel    String?
  reasons          String[]
  suggestedActions String[]
  classifiedAt     DateTime  @default(now())
  classifiedBy     String?
  users            users?    @relation(fields: [classifiedBy], references: [id])
  documents        documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([classifiedAt])
}

model document_comments {
  id                      String              @id
  documentId              String
  userId                  String
  content                 String
  isResolved              Boolean             @default(false)
  parentId                String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime
  documents               documents           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  document_comments       document_comments?  @relation("document_commentsTodocument_comments", fields: [parentId], references: [id])
  other_document_comments document_comments[] @relation("document_commentsTodocument_comments")

  @@index([documentId])
  @@index([parentId])
  @@index([userId])
}

model document_content {
  id         String    @id
  documentId String
  content    String
  version    Int       @default(1)
  createdAt  DateTime  @default(now())
  createdBy  String?
  users      users?    @relation(fields: [createdBy], references: [id])
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@index([documentId])
}

model document_favorites {
  id         String    @id
  documentId String
  userId     String
  addedAt    DateTime  @default(now())
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@index([userId])
}

model document_folders {
  id                     String                 @id
  name                   String
  description            String?
  path                   String
  parentId               String?
  level                  Int                    @default(0)
  isPublic               Boolean                @default(false)
  ownerId                String
  department             String?
  projectId              String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  document_folders       document_folders?      @relation("document_foldersTodocument_folders", fields: [parentId], references: [id])
  other_document_folders document_folders[]     @relation("document_foldersTodocument_folders")
  document_permissions   document_permissions[]

  @@index([department])
  @@index([name])
  @@index([ownerId])
  @@index([parentId])
  @@index([projectId])
}

model document_permissions {
  id               String                 @id
  documentId       String?
  folderId         String?
  userId           String?
  userEmail        String?
  groupId          String?
  permission       DocumentPermissionType
  grantedBy        String
  grantedAt        DateTime               @default(now())
  expiresAt        DateTime?
  isInherited      Boolean                @default(false)
  documents        documents?             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  document_folders document_folders?      @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([folderId])
  @@index([permission])
  @@index([userEmail])
  @@index([userId])
}

model document_shares {
  id              String                 @id
  documentId      String
  sharedBy        String
  sharedWith      String?
  sharedWithEmail String?
  permission      DocumentPermissionType
  shareToken      String?                @unique
  expiresAt       DateTime?
  isActive        Boolean                @default(true)
  accessCount     Int                    @default(0)
  lastAccessedAt  DateTime?
  message         String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime
  documents       documents              @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([expiresAt])
  @@index([shareToken])
  @@index([sharedBy])
  @@index([sharedWith])
}

model document_templates {
  id          String   @id
  name        String
  description String?
  category    String
  template    Json
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([isActive])
}

model document_workflow_tasks {
  id          String                   @id
  documentId  String
  taskType    DocumentWorkflowTaskType
  assignedTo  String
  assignedBy  String
  title       String
  description String?
  status      TaskStatus               @default(PENDING)
  priority    TaskPriority             @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  comments    String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime
  documents   documents                @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([assignedTo])
  @@index([documentId])
  @@index([dueDate])
  @@index([status])
  @@index([taskType])
}

model documents {
  id                         String                      @id
  filename                   String
  originalName               String
  path                       String
  url                        String?
  mimeType                   String
  size                       Int
  category                   DocumentCategory?
  description                String?
  summary                    String?
  extractedText              String?
  ocrText                    String?
  searchKeywords             String[]                    @default([])
  tags                       String[]                    @default([])
  version                    String                      @default("1.0")
  versionComment             String?
  isLatestVersion            Boolean                     @default(true)
  parentDocumentId           String?
  classification             DocumentClassification      @default(PUBLIC)
  accessLevel                String                      @default("internal")
  isPublic                   Boolean                     @default(false)
  isCheckedOut               Boolean                     @default(false)
  checkedOutBy               String?
  checkedOutAt               DateTime?
  lockExpiresAt              DateTime?
  author                     String?
  department                 String?
  departmentId               String?
  projectId                  String?
  customMetadata             Json?
  approvalStatus             DocumentApprovalStatus      @default(DRAFT)
  approvedBy                 String?
  approvedAt                 DateTime?
  reviewStatus               DocumentReviewStatus        @default(PENDING)
  sentimentScore             Float?
  readabilityScore           Float?
  qualityScore               Float?
  keyPhrases                 String[]                    @default([])
  aiSummary                  String?
  uploadedBy                 String?
  viewCount                  Int                         @default(0)
  downloadCount              Int                         @default(0)
  lastAccessedAt             DateTime?
  lastAccessedBy             String?
  retentionPeriod            Int?
  archiveDate                DateTime?
  isArchived                 Boolean                     @default(false)
  isDeleted                  Boolean                     @default(false)
  deletedAt                  DateTime?
  deletedBy                  String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  folderPath                 String?
  isPersonalRepo             Boolean                     @default(true)
  publishedAt                DateTime?
  document_activities        document_activities[]
  document_analysis          document_analysis?
  document_audit_logs        document_audit_logs[]
  document_classification_ai document_classification_ai?
  document_comments          document_comments[]
  document_content           document_content[]
  document_favorites         document_favorites[]
  document_permissions       document_permissions[]
  document_shares            document_shares[]
  document_workflow_tasks    document_workflow_tasks[]
  departments                departments?                @relation(fields: [departmentId], references: [id])
  documents                  documents?                  @relation("documentsTodocuments", fields: [parentDocumentId], references: [id])
  other_documents            documents[]                 @relation("documentsTodocuments")
  projects                   projects?                   @relation(fields: [projectId], references: [id])

  @@index([approvalStatus])
  @@index([category])
  @@index([checkedOutBy])
  @@index([classification])
  @@index([createdAt])
  @@index([department])
  @@index([filename])
  @@index([folderPath])
  @@index([isArchived])
  @@index([isCheckedOut])
  @@index([isDeleted])
  @@index([isPublic])
  @@index([lastAccessedAt])
  @@index([projectId])
  @@index([reviewStatus])
  @@index([uploadedBy])
}

model document_category_folders {
  id            String   @id @default(cuid())
  path          String   @unique
  department    String
  category      String
  documentCount Int      @default(0) @map("document_count")
  createdBy     String?  @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")
  lastUpdated   DateTime @default(now()) @updatedAt @map("last_updated")
  isActive      Boolean  @default(true) @map("is_active")
  metadata      Json?

  @@unique([department, category])
  @@index([department])
  @@index([category])
  @@index([path])
  @@index([isActive])
}

model employees {
  id                                    String                     @id
  userId                                String                     @unique
  employeeId                            String                     @unique
  firstName                             String
  lastName                              String
  middleName                            String?
  dateOfBirth                           DateTime?
  gender                                String?
  nationality                           String?
  nationalId                            String?                    @unique
  passportNumber                        String?
  email                                 String                     @unique
  phoneNumber                           String?
  alternativePhone                      String?
  personalEmail                         String?
  alternativeEmail                      String?
  address                               String?
  emergencyContact                      String?
  emergencyPhone                        String?
  emergencyContactAddress               String?
  emergencyContactRelationship          String?
  profilePicture                        String?
  department                            String?
  position                              String
  employmentType                        String                     @default("FULL_TIME")
  startDate                             DateTime
  endDate                               DateTime?
  salary                                Float?
  currency                              String?                    @default("USD")
  status                                String                     @default("ACTIVE")
  supervisor_id                         String?
  reviewer_id                           String?
  is_supervisor                         Boolean                    @default(false)
  is_reviewer                           Boolean                    @default(false)
  medical_aid                           Boolean                    @default(false)
  funeral_cover                         Boolean                    @default(false)
  vehicle_benefit                       Boolean                    @default(false)
  fuel_allowance                        Boolean                    @default(false)
  airtime_allowance                     Boolean                    @default(false)
  other_benefits                        String[]                   @default([])
  archived_at                           DateTime?
  archive_reason                        String?
  access_revoked                        Boolean                    @default(false)
  createdAt                             DateTime                   @default(now())
  updatedAt                             DateTime
  hireDate                              DateTime?
  departmentId                          String?
  marital_status                        String?                    @db.VarChar(255)
  country                               String?                    @db.VarChar(255)
  province                              String?                    @db.VarChar(255)
  work_location                         String?                    @db.VarChar(255)
  pay_grade                             String?                    @db.VarChar(255)
  pay_frequency                         String?                    @default("MONTHLY") @db.VarChar(255)
  education                             String?
  skills                                String[]                   @default([])
  certifications                        String[]                   @default([])
  health_insurance                      Boolean?                   @default(false)
  dental_coverage                       Boolean?                   @default(false)
  vision_coverage                       Boolean?                   @default(false)
  life_insurance                        Boolean?                   @default(false)
  retirement_plan                       Boolean?                   @default(false)
  flexible_pto                          Boolean?                   @default(false)
  orientation_training_required         Boolean?                   @default(false)
  security_training_required            Boolean?                   @default(false)
  department_specific_training_required Boolean?                   @default(false)
  training_completed                    Boolean?                   @default(false)
  initial_training_completed            Boolean?                   @default(false)
  access_level                          String?                    @default("BASIC") @db.VarChar(255)
  user_role                             String?                    @default("EMPLOYEE") @db.VarChar(255)
  system_access                         String[]                   @default([])
  document_security_clearance           String?                    @default("STANDARD") @db.VarChar(255)
  contract_signed                       Boolean?                   @default(false)
  background_check_completed            Boolean?                   @default(false)
  medical_check_completed               Boolean?                   @default(false)
  additional_notes                      String?                    @db.Text
  departments                           departments?               @relation(fields: [departmentId], references: [id])
  employees                             employees?                 @relation("employeesToemployees", fields: [supervisor_id], references: [id])
  reviewer                              employees?                 @relation("reviewerToemployees", fields: [reviewer_id], references: [id])
  other_employees                       employees[]                @relation("employeesToemployees")
  reviewed_employees                    employees[]                @relation("reviewerToemployees")
  users                                 users                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job_descriptions                      job_descriptions?
  notifications                         notifications[]
  performance_achievements              performance_achievements[]
  performance_appraisals                performance_appraisals[]
  performance_plans                     performance_plans[]
  performance_reviews                   performance_reviews[]
  qualifications                        qualifications[]
  training_attendance                   training_attendance[]
  training_enrollments                  training_enrollments[]

  @@index([archived_at])
  @@index([department])
  @@index([email])
  @@index([employeeId])
  @@index([is_reviewer])
  @@index([is_supervisor])
  @@index([status])
  @@index([supervisor_id])
  @@index([reviewer_id])
}

model event_registrations {
  id                  String   @id
  eventId             String
  participantName     String
  participantEmail    String
  participantPhone    String?
  organization        String?
  position            String?
  specialRequirements String?
  status              String   @default("pending")
  registeredAt        DateTime @default(now())
  updatedAt           DateTime
  events              events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantEmail])
  @@index([eventId])
  @@index([status])
}

model events {
  id                   String                @id
  title                String
  description          String?
  type                 String
  status               String                @default("planning")
  startDate            DateTime
  startTime            String?
  endDate              DateTime?
  endTime              String?
  location             String?
  address              String?
  venue                String?
  capacity             Int?
  expectedAttendees    Int?
  actualAttendees      Int?
  agenda               Json?
  objectives           Json?
  speakers             Json?
  budget               Float?
  actualCost           Float                 @default(0)
  requiresRegistration Boolean               @default(false)
  registrationDeadline DateTime?
  registrationFields   Json?
  partners             Json?
  organizer            String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  event_registrations  event_registrations[]

  @@index([startDate])
  @@index([status])
  @@index([type])
}

model job_descriptions {
  id                  String    @id
  employeeId          String    @unique
  jobTitle            String
  location            String
  jobSummary          String?
  keyResponsibilities Json
  essentialExperience String?
  essentialSkills     String?
  acknowledgment      Boolean   @default(false)
  signatureFileName   String?
  signatureFileUrl    String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime
  version             Int       @default(1)
  isActive            Boolean   @default(true)
  employees           employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([isActive])
}

model maintenance_records {
  id              String    @id
  assetId         String
  description     String?
  cost            Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  nextDueDate     DateTime?
  performedBy     String?
  performedDate   DateTime
  maintenanceType String
  assets          assets    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([performedDate])
}

model notification_categories {
  id          String   @id
  name        String   @unique
  description String?
  icon        String?
  color       String?
  count       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model notification_routes {
  id                         String                     @id
  ruleId                     String
  recipient                  String
  action                     String
  deadline                   String
  order                      Int                        @default(0)
  notification_routing_rules notification_routing_rules @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
}

model notification_routing_rules {
  id                  String                @id
  name                String
  description         String?
  trigger             String
  isActive            Boolean               @default(true)
  successRate         Float                 @default(0)
  lastTriggered       DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  createdBy           String
  notification_routes notification_routes[]
  users               users                 @relation(fields: [createdBy], references: [id])

  @@index([isActive])
  @@index([trigger])
}

model notifications {
  id                                     String           @id
  userId                                 String?
  title                                  String
  message                                String
  type                                   NotificationType @default(INFO)
  isRead                                 Boolean          @default(false)
  actionUrl                              String?
  createdAt                              DateTime         @default(now())
  updatedAt                              DateTime         @default(now())
  acknowledgedAt                         DateTime?
  deadline                               DateTime?
  employeeId                             String?
  metadata                               Json?
  priority                               String           @default("normal")
  recipientId                            String?
  scheduledAt                            DateTime?
  senderId                               String?
  sentAt                                 DateTime?
  status                                 String           @default("pending")
  employees                              employees?       @relation(fields: [employeeId], references: [id])
  users_notifications_recipientIdTousers users?           @relation("notifications_recipientIdTousers", fields: [recipientId], references: [id])
  users_notifications_senderIdTousers    users?           @relation("notifications_senderIdTousers", fields: [senderId], references: [id])

  @@index([createdAt])
  @@index([deadline])
  @@index([isRead])
  @@index([priority])
  @@index([status])
  @@index([type])
  @@index([userId])
}

model performance_achievements {
  id           String    @id
  employeeId   String
  title        String
  description  String?
  dateAchieved DateTime
  impact       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  employees    employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([dateAchieved])
  @@index([employeeId])
}

model performance_activities {
  id                           String                       @id
  responsibilityId             String
  title                        String
  description                  String?
  targetDate                   DateTime?
  status                       String                       @default("pending")
  completedAt                  DateTime?
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  performance_responsibilities performance_responsibilities @relation(fields: [responsibilityId], references: [id], onDelete: Cascade)

  @@index([responsibilityId])
  @@index([targetDate])
}

model performance_appraisals {
  id                                               String                                   @id
  planId                                           String
  employeeId                                       String
  supervisorId                                     String
  reviewerId                                       String?
  appraisalType                                    String
  overallRating                                    Float?
  selfAssessments                                  Json?
  supervisorAssessments                            Json?
  valueGoalsAssessments                            Json?
  electronicSignature                              String?
  status                                           String                                   @default("draft")
  submittedAt                                      DateTime?
  approvedAt                                       DateTime?
  supervisorApprovedAt                             DateTime?
  reviewerApprovedAt                               DateTime?
  comments                                         Json?
  createdAt                                        DateTime                                 @default(now())
  updatedAt                                        DateTime
  employees                                        employees                                @relation(fields: [employeeId], references: [id])
  performance_plans                                performance_plans                        @relation(fields: [planId], references: [id], onDelete: Cascade)
  users_performance_appraisals_reviewerIdTousers   users?                                   @relation("performance_appraisals_reviewerIdTousers", fields: [reviewerId], references: [id])
  users_performance_appraisals_supervisorIdTousers users                                    @relation("performance_appraisals_supervisorIdTousers", fields: [supervisorId], references: [id])
  performance_responsibility_assessments           performance_responsibility_assessments[]
  performance_value_assessments                    performance_value_assessments[]

  @@index([employeeId])
  @@index([planId])
  @@index([reviewerId])
  @@index([supervisorId])
}

model performance_criteria {
  id          String   @id
  name        String
  description String?
  weight      Float    @default(0)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
}

model performance_feedback {
  id           String   @id
  reviewId     String
  feedbackType String
  content      String
  rating       Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([feedbackType])
  @@index([reviewId])
}

model performance_plan_comments {
  id                String            @id
  planId            String
  userId            String
  comment           String
  commentType       String
  createdAt         DateTime          @default(now())
  performance_plans performance_plans @relation(fields: [planId], references: [id], onDelete: Cascade)
  users             users             @relation(fields: [userId], references: [id])

  @@index([commentType])
  @@index([createdAt])
  @@index([planId])
  @@index([userId])
}

model performance_plans {
  id                                          String                         @id
  employeeId                                  String
  supervisorId                                String
  planYear                                    Int
  planPeriod                                  String
  planTitle                                   String?                        @default("Annual Plan")
  startDate                                   DateTime?
  endDate                                     DateTime?
  status                                      String                         @default("draft")
  workflowStatus                              String                         @default("draft")
  createdAt                                   DateTime                       @default(now())
  updatedAt                                   DateTime
  reviewerApprovedAt                          DateTime?
  reviewerComments                            String?
  reviewerId                                  String?
  submittedAt                                 DateTime?
  supervisorApprovedAt                        DateTime?
  supervisorComments                          String?
  comments                                    Json?
  deliverables                                Json?
  valueGoals                                  Json?
  competencies                                Json?
  developmentNeeds                            Json?
  supervisorApproval                          String?                        @default("pending")
  reviewerApproval                            String?                        @default("pending")
  reviewStartDate                             DateTime?
  reviewEndDate                               DateTime?
  performance_appraisals                      performance_appraisals[]
  performance_plan_comments                   performance_plan_comments[]
  employees                                   employees                      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  users_performance_plans_reviewerIdTousers   users?                         @relation("performance_plans_reviewerIdTousers", fields: [reviewerId], references: [id])
  users_performance_plans_supervisorIdTousers users                          @relation("performance_plans_supervisorIdTousers", fields: [supervisorId], references: [id])
  performance_responsibilities                performance_responsibilities[]

  @@index([employeeId])
  @@index([planYear])
  @@index([reviewerId])
  @@index([status])
  @@index([supervisorId])
}

model performance_responsibilities {
  id                                     String                                   @id
  planId                                 String
  title                                  String
  description                            String?
  weight                                 Float?                                   @default(0)
  createdAt                              DateTime                                 @default(now())
  updatedAt                              DateTime
  performance_activities                 performance_activities[]
  performance_plans                      performance_plans                        @relation(fields: [planId], references: [id], onDelete: Cascade)
  performance_responsibility_assessments performance_responsibility_assessments[]

  @@index([planId])
}

model performance_responsibility_assessments {
  id                           String                       @id
  appraisalId                  String
  responsibilityId             String
  selfRating                   String?
  supervisorRating             String?
  reviewerRating               String?
  comments                     String?
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  performance_appraisals       performance_appraisals       @relation(fields: [appraisalId], references: [id], onDelete: Cascade)
  performance_responsibilities performance_responsibilities @relation(fields: [responsibilityId], references: [id])

  @@index([appraisalId])
  @@index([responsibilityId])
}

model performance_reviews {
  id                                            String    @id
  employeeId                                    String
  reviewPeriod                                  String
  reviewType                                    String
  overallRating                                 Float?
  goals                                         Json?
  feedback                                      String?
  reviewDate                                    DateTime
  nextReviewDate                                DateTime?
  createdAt                                     DateTime  @default(now())
  updatedAt                                     DateTime
  areasForImprovement                           String?
  improvementPlan                               String?
  nextSteps                                     String?
  reviewStatus                                  String    @default("draft")
  reviewedAt                                    DateTime?
  reviewerId                                    String?
  strengths                                     String?
  submittedAt                                   DateTime?
  supervisorId                                  String?
  employees                                     employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  users_performance_reviews_reviewerIdTousers   users?    @relation("performance_reviews_reviewerIdTousers", fields: [reviewerId], references: [id])
  users_performance_reviews_supervisorIdTousers users?    @relation("performance_reviews_supervisorIdTousers", fields: [supervisorId], references: [id])

  @@index([employeeId])
  @@index([reviewDate])
  @@index([reviewStatus])
}

model performance_value_assessments {
  id                     String                 @id
  appraisalId            String
  valueType              String
  valueTitle             String
  selfRating             String?
  supervisorRating       String?
  reviewerRating         String?
  comments               String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  performance_appraisals performance_appraisals @relation(fields: [appraisalId], references: [id], onDelete: Cascade)

  @@index([appraisalId])
}

model projects {
  id                              String       @id
  name                            String
  description                     String?
  objectives                      Json?
  timeframe                       String?
  startDate                       DateTime?
  endDate                         DateTime?
  country                         String?
  province                        String?
  budget                          Float?
  actualSpent                     Float?       @default(0)
  status                          String       @default("PLANNING")
  priority                        String       @default("MEDIUM")
  progress                        Int?         @default(0)
  managerId                       String?
  createdAt                       DateTime     @default(now())
  updatedAt                       DateTime
  currency                        String?      @default("USD")
  creatorId                       String?
  activities                      activities[]
  documents                       documents[]
  meal_form_projects             meal_form_projects[]
  users_projects_creatorIdTousers users?       @relation("projects_creatorIdTousers", fields: [creatorId], references: [id])
  users_projects_managerIdTousers users?       @relation("projects_managerIdTousers", fields: [managerId], references: [id])

  @@index([status])
}

/// MEAL Module
model meal_forms {
  id           String   @id @default(cuid())
  name         String
  description  String?
  projectId    String?
  version      Int      @default(1)
  language     String?  // e.g., en,sna,nde
  status       String   @default("draft") // draft|published|archived
  createdBy    String?
  updatedBy    String?
  publishedAt  DateTime?
  schema       Json     // JSON form schema (fields, logic, options)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  meal_submissions meal_submissions[]
  meal_form_projects meal_form_projects[]
}

model meal_submissions {
  id           String   @id @default(cuid())
  formId       String
  projectId    String?
  userId       String?
  userEmail    String?
  submittedBy  String?
  submittedAt  DateTime @default(now())
  latitude     Float?
  longitude    Float?
  attachments  Json?
  data         Json     // answers keyed by question key
  metadata     Json?
  deviceInfo   Json?    // device information for tracking

  meal_forms   meal_forms @relation(fields: [formId], references: [id])

  @@index([formId])
}

model meal_indicators {
  id            String   @id @default(cuid())
  projectId     String?
  code          String
  name          String
  level         String   // input|output|outcome|impact
  baseline      Float?   
  target        Float?
  unit          String?
  disaggregation Json?
  mapping       Json?    // array of question keys and aggregation type
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model qualifications {
  id                 String            @id
  employeeId         String
  type               QualificationType
  title              String
  institution        String?
  description        String?
  dateObtained       DateTime
  expiryDate         DateTime?
  grade              String?
  certificateUrl     String?
  verificationStatus String            @default("pending")
  isVerified         Boolean           @default(false)
  creditsEarned      Float?
  skillsGained       String[]          @default([])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  employees          employees         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([dateObtained])
  @@index([employeeId])
  @@index([expiryDate])
  @@index([type])
}

model risk_assessments {
  id                                       String           @id
  riskId                                   String
  assessmentDate                           DateTime         @default(now())
  assessorId                               String?
  previousProbability                      RiskProbability?
  previousImpact                           RiskImpact?
  newProbability                           RiskProbability
  newImpact                                RiskImpact
  newRiskScore                             Int
  reasoning                                String?
  evidence                                 String?
  recommendations                          String?
  status                                   String           @default("SUBMITTED")
  reviewedAt                               DateTime?
  reviewerId                               String?
  reviewComments                           String?
  createdAt                                DateTime         @default(now())
  updatedAt                                DateTime
  users_risk_assessments_assessorIdTousers users?           @relation("risk_assessments_assessorIdTousers", fields: [assessorId], references: [id])
  users_risk_assessments_reviewerIdTousers users?           @relation("risk_assessments_reviewerIdTousers", fields: [reviewerId], references: [id])
  risks                                    risks            @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model risk_audit_logs {
  id          String   @id
  riskId      String
  action      String
  field       String?
  oldValue    String?
  newValue    String?
  userId      String?
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  description String?
  risks       risks    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  users       users?   @relation(fields: [userId], references: [id])
}

model risk_documents {
  id           String   @id
  riskId       String
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  filePath     String
  description  String?
  documentType String   @default("SUPPORTING")
  uploadedById String?
  uploadedAt   DateTime @default(now())
  risks        risks    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  users        users?   @relation(fields: [uploadedById], references: [id])
}

model risk_mitigations {
  id                                        String           @id
  riskId                                    String
  strategy                                  String
  controlMeasure                            String?
  ownerId                                   String?
  deadline                                  DateTime?
  implementationProgress                    Int              @default(0)
  status                                    MitigationStatus @default(PLANNED)
  milestones                                Json?
  lastUpdated                               DateTime
  completedAt                               DateTime?
  notes                                     String?
  createdAt                                 DateTime         @default(now())
  updatedAt                                 DateTime
  createdById                               String?
  users_risk_mitigations_createdByIdTousers users?           @relation("risk_mitigations_createdByIdTousers", fields: [createdById], references: [id])
  users_risk_mitigations_ownerIdTousers     users?           @relation("risk_mitigations_ownerIdTousers", fields: [ownerId], references: [id])
  risks                                     risks            @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model risk_notifications {
  id        String    @id
  userId    String
  type      String
  title     String
  message   String
  riskId    String?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  users     users     @relation(fields: [userId], references: [id])
}

model risks {
  id                             String             @id
  riskId                         String             @unique
  title                          String
  description                    String
  category                       RiskCategory
  department                     String?
  probability                    RiskProbability
  impact                         RiskImpact
  riskScore                      Int
  status                         RiskStatus         @default(OPEN)
  dateIdentified                 DateTime           @default(now())
  lastAssessed                   DateTime?
  ownerId                        String?
  tags                           String[]           @default([])
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime
  createdById                    String?
  risk_assessments               risk_assessments[]
  risk_audit_logs                risk_audit_logs[]
  risk_documents                 risk_documents[]
  risk_mitigations               risk_mitigations[]
  users_risks_createdByIdTousers users?             @relation("risks_createdByIdTousers", fields: [createdById], references: [id])
  users_risks_ownerIdTousers     users?             @relation("risks_ownerIdTousers", fields: [ownerId], references: [id])
}

model search_logs {
  id           String   @id
  userId       String
  query        String
  resultsCount Int
  searchTime   Int
  filters      Json?
  searchType   String
  createdAt    DateTime @default(now())
  users        users    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([searchType])
  @@index([userId])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model system_config {
  id          String   @id
  key         String   @unique
  value       Json
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
}

model training_attendance {
  id                String            @id
  sessionId         String
  employeeId        String
  status            String
  checkInTime       DateTime?
  checkOutTime      DateTime?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  employees         employees         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training_sessions training_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, employeeId])
  @@index([employeeId])
}

model training_certificates {
  id                   String               @id
  enrollmentId         String               @unique
  certificateNumber    String               @unique
  issuedDate           DateTime
  expiryDate           DateTime?
  isValid              Boolean              @default(true)
  downloadCount        Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  training_enrollments training_enrollments @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([certificateNumber])
  @@index([issuedDate])
}

model training_enrollments {
  id                    String                 @id
  employeeId            String
  enrollmentDate        DateTime               @default(now())
  completionDate        DateTime?
  attendanceRate        Float?
  createdAt             DateTime               @default(now())
  feedback              String?
  finalScore            Float?
  programId             String
  progress              Int                    @default(0)
  updatedAt             DateTime
  status                String                 @default("ENROLLED")
  training_certificates training_certificates?
  employees             employees              @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training_programs     training_programs      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, employeeId])
  @@index([employeeId])
  @@index([status])
}

model training_programs {
  id                     String                 @id
  title                  String
  description            String?
  category               String
  duration               String
  format                 String
  capacity               Int?
  instructor             String?
  status                 String                 @default("DRAFT")
  startDate              DateTime?
  endDate                DateTime?
  enrollmentDeadline     DateTime?
  certificationAvailable Boolean                @default(false)
  prerequisites          String?
  learningObjectives     Json?
  materials              Json?
  cost                   Float?                 @default(0)
  currency               String?                @default("USD")
  location               String?
  onlineLink             String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  training_enrollments   training_enrollments[]
  training_sessions      training_sessions[]

  @@index([category])
  @@index([startDate])
  @@index([status])
}

model training_sessions {
  id                  String                @id
  programId           String
  title               String
  description         String?
  sessionDate         DateTime
  startTime           String
  endTime             String
  instructor          String?
  location            String?
  onlineLink          String?
  materials           Json?
  maxAttendees        Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  training_attendance training_attendance[]
  training_programs   training_programs     @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@index([sessionDate])
}

model users {
  id                                                                String                       @id
  email                                                             String                       @unique
  username                                                          String?                      @unique
  role                                                              UserRole                     @default(USER)
  department                                                        String?
  position                                                          String?
  isActive                                                          Boolean                      @default(true)
  lastLogin                                                         DateTime?
  createdAt                                                         DateTime                     @default(now())
  updatedAt                                                         DateTime
  emailVerified                                                     DateTime?
  firstName                                                         String?
  lastName                                                          String?
  roles                                                             String[]                     @default([])
  phoneNumber                                                       String?
  profileImage                                                      String?
  bio                                                               String?
  location                                                          String?
  twoFactorEnabled                                                  Boolean                      @default(false)
  supervisorId                                                      String?
  employeeId                                                        String?
  passwordHash                                                      String?
  accounts                                                          accounts[]
  audit_logs                                                        audit_logs[]
  batch_analyses                                                    batch_analyses[]
  document_activities                                               document_activities[]
  document_analysis                                                 document_analysis[]
  document_classification_ai                                        document_classification_ai[]
  document_content                                                  document_content[]
  employees                                                         employees?
  notification_routing_rules                                        notification_routing_rules[]
  notifications_notifications_recipientIdTousers                    notifications[]              @relation("notifications_recipientIdTousers")
  notifications_notifications_senderIdTousers                       notifications[]              @relation("notifications_senderIdTousers")
  performance_appraisals_performance_appraisals_reviewerIdTousers   performance_appraisals[]     @relation("performance_appraisals_reviewerIdTousers")
  performance_appraisals_performance_appraisals_supervisorIdTousers performance_appraisals[]     @relation("performance_appraisals_supervisorIdTousers")
  performance_plan_comments                                         performance_plan_comments[]
  performance_plans_performance_plans_reviewerIdTousers             performance_plans[]          @relation("performance_plans_reviewerIdTousers")
  performance_plans_performance_plans_supervisorIdTousers           performance_plans[]          @relation("performance_plans_supervisorIdTousers")
  performance_reviews_performance_reviews_reviewerIdTousers         performance_reviews[]        @relation("performance_reviews_reviewerIdTousers")
  performance_reviews_performance_reviews_supervisorIdTousers       performance_reviews[]        @relation("performance_reviews_supervisorIdTousers")
  projects_projects_creatorIdTousers                                projects[]                   @relation("projects_creatorIdTousers")
  projects_projects_managerIdTousers                                projects[]                   @relation("projects_managerIdTousers")
  risk_assessments_risk_assessments_assessorIdTousers               risk_assessments[]           @relation("risk_assessments_assessorIdTousers")
  risk_assessments_risk_assessments_reviewerIdTousers               risk_assessments[]           @relation("risk_assessments_reviewerIdTousers")
  risk_audit_logs                                                   risk_audit_logs[]
  risk_documents                                                    risk_documents[]
  risk_mitigations_risk_mitigations_createdByIdTousers              risk_mitigations[]           @relation("risk_mitigations_createdByIdTousers")
  risk_mitigations_risk_mitigations_ownerIdTousers                  risk_mitigations[]           @relation("risk_mitigations_ownerIdTousers")
  risk_notifications                                                risk_notifications[]
  risks_risks_createdByIdTousers                                    risks[]                      @relation("risks_createdByIdTousers")
  risks_risks_ownerIdTousers                                        risks[]                      @relation("risks_ownerIdTousers")
  search_logs                                                       search_logs[]
  sessions                                                          sessions[]
  users                                                             users?                       @relation("usersTousers", fields: [supervisorId], references: [id])
  other_users                                                       users[]                      @relation("usersTousers")
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditType {
  FULL_INVENTORY
  PARTIAL_INVENTORY
  COMPLIANCE_AUDIT
  FINANCIAL_AUDIT
  SECURITY_AUDIT
  QUALITY_AUDIT
}

enum AuditStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssetCategory {
  COMPUTER
  FURNITURE
  VEHICLE
  EQUIPMENT
  OTHER
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  DISPOSED
  LOST
}

enum AuditLogSeverity {
  LOW
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  SPAM
}

enum CallType {
  INQUIRY
  COMPLAINT
  REQUEST
  EMERGENCY
  FEEDBACK
  OTHER
}

enum DocumentApprovalStatus {
  DRAFT
  PENDING_REVIEW
  UNDER_REVIEW
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PUBLISHED
}

enum DocumentAuditAction {
  CREATED
  VIEWED
  DOWNLOADED
  EDITED
  DELETED
  RESTORED
  SHARED
  UNSHARED
  FAVORITED
  UNFAVORITED
  COMMENTED
  CHECKED_OUT
  CHECKED_IN
  APPROVED
  REJECTED
  CLASSIFIED
  PERMISSIONS_CHANGED
  MOVED
  COPIED
  ARCHIVED
  UNARCHIVED
}

enum DocumentCategory {
  POLICY
  PROCEDURE
  FORM
  REPORT
  CONTRACT
  INVOICE
  PRESENTATION
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  ARCHIVE
  OTHER
}

enum DocumentClassification {
  PUBLIC
  INTERNAL
  CONFIDENTIAL
  RESTRICTED
  TOP_SECRET
}

enum DocumentPermissionType {
  VIEW
  COMMENT
  EDIT
  DOWNLOAD
  SHARE
  DELETE
  ADMIN
}

enum DocumentReviewStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REQUIRES_CHANGES
  REJECTED
}

enum DocumentWorkflowTaskType {
  REVIEW
  APPROVE
  EDIT
  TRANSLATE
  DESIGN
  LEGAL_REVIEW
  COMPLIANCE_CHECK
  PUBLISH
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum MitigationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  PERFORMANCE_PLAN
  APPRAISAL
  TRAINING
  DEADLINE
  ESCALATION
  APPROVAL
  EMERGENCY_LEAVE
  LEAVE_EXTENSION
  MEDICAL_LEAVE
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum QualificationType {
  EDUCATION
  CERTIFICATION
  SKILL
  TRAINING
  LICENSE
  AWARD
}

enum RiskCategory {
  OPERATIONAL
  STRATEGIC
  FINANCIAL
  COMPLIANCE
  REPUTATIONAL
  ENVIRONMENTAL
  CYBERSECURITY
  HR_PERSONNEL
}

enum RiskImpact {
  LOW
  MEDIUM
  HIGH
}

enum RiskProbability {
  LOW
  MEDIUM
  HIGH
}

enum RiskStatus {
  OPEN
  MITIGATED
  ESCALATED
  CLOSED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  HR_MANAGER
  PROJECT_MANAGER
  CALL_CENTRE_AGENT
  EMPLOYEE
  USER
  SUPERUSER
  BASIC_USER_1
  BASIC_USER_2
  ADVANCE_USER_1
  ADVANCE_USER_2
  HR
  SYSTEM_ADMINISTRATOR
}

model meal_form_projects {
  id        String   @id @default(uuid())
  formId    String   // UUID from meal_forms
  projectId String   // TEXT from projects
  createdAt DateTime @default(now())

  meal_forms meal_forms @relation(fields: [formId], references: [id], onDelete: Cascade)
  projects   projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([formId, projectId])
}
