generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  username         String?    @unique
  role             UserRole   @default(USER)
  department       String?
  position         String?
  isActive         Boolean    @default(true)
  lastLogin        DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  emailVerified    DateTime?
  firstName        String?
  lastName         String?
  roles            String[]   @default([])
  phoneNumber      String?
  profileImage     String?
  bio              String?
  location         String?
  twoFactorEnabled Boolean    @default(false)
  accounts         Account[]
  auditLogs        AuditLog[]
  createdProjects  Project[]  @relation("ProjectCreator")
  managedProjects  Project[]  @relation("ProjectManager")
  sessions         Session[]
  roleAssignments  UserRoleAssignment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("audit_logs")
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  objectives  Json?
  timeframe   String?
  startDate   DateTime?
  endDate     DateTime?
  country     String?
  province    String?
  budget      Float?
  actualSpent Float?     @default(0)
  status      String     @default("PLANNING")
  priority    String     @default("MEDIUM")
  progress    Int?       @default(0)
  managerId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  currency    String?    @default("USD")
  creatorId   String?
  activities  Activity[]
  documents   Document[]
  creator     User?      @relation("ProjectCreator", fields: [creatorId], references: [id])
  manager     User?      @relation("ProjectManager", fields: [managerId], references: [id])

  @@index([status])
  @@map("projects")
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([dueDate])
  @@index([projectId])
  @@map("activities")
}

model CallRecord {
  id                 String    @id @default(cuid())
  caseNumber         String    @unique
  callerName         String
  callerPhone        String?
  callerEmail        String?
  callType           String?   @default("INBOUND")
  category           String?   @default("INQUIRY")
  priority           String?   @default("MEDIUM")
  status             String?   @default("OPEN")
  subject            String
  description        String?
  assignedOfficer    String?
  summary            String?
  notes              String?
  resolution         String?
  satisfactionRating Int?
  callStartTime      DateTime?
  callEndTime        DateTime?
  resolvedAt         DateTime?
  district           String?
  ward               String?
  followUpRequired   Boolean   @default(false)
  followUpDate       DateTime?
  
  // Caller details (person making the call)
  callerAge          String?
  callerGender       String?
  callerProvince     String?
  callerAddress      String?
  callerKeyPopulation String?
  
  // Client details (person who needs help - may be different from caller)
  clientName         String?
  clientAge          String?
  clientGender       String?
  clientProvince     String?
  clientKeyPopulation String?
  clientEmploymentStatus String?
  clientEducationLevel String?
  
  // Call details
  communicationMode  String?
  callLanguage       String?
  callValidity       String?
  newOrRepeatCall    String?
  howHeardAboutUs    String?
  
  // Service details
  voucherIssued      Boolean   @default(false)
  voucherValue       Float?
  servicesRecommended String?
  referralDetails    String?
  
  // Call timing
  callDurationMinutes Int?
  
  // Additional tracking
  perpetratorInfo    String?
  isCase             Boolean   @default(false)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([caseNumber])
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([assignedOfficer])
  @@index([callStartTime])
  @@index([callerProvince])
  @@index([clientProvince])
  @@index([communicationMode])
  @@index([callValidity])
  @@index([voucherIssued])
  @@map("call_records")
}

model Department {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  budget      Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  code        String?      @unique
  location    String?
  manager     String?
  status      String       @default("ACTIVE")
  
  // Hierarchical structure
  parentId    String?
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  subunits    Department[] @relation("DepartmentHierarchy")
  
  // Department level (0 = main department, 1+ = subunit levels)
  level       Int          @default(0)
  
  employees   Employee[]

  @@index([name])
  @@index([status])
  @@index([parentId])
  @@index([level])
  @@map("departments")
}

model Employee {
  id                  String               @id @default(cuid())
  userId              String               @unique
  employeeId          String               @unique
  firstName           String
  lastName            String
  middleName          String?
  dateOfBirth         DateTime?
  gender              String?
  nationality         String?
  nationalId          String?              @unique
  passportNumber      String?
  email               String               @unique
  phoneNumber         String?
  alternativePhone    String?
  address             String?
  emergencyContact    String?
  emergencyPhone      String?
  department          String?
  position            String
  employmentType      String               @default("FULL_TIME")
  startDate           DateTime
  endDate             DateTime?
  salary              Float?
  currency            String?              @default("USD")
  status              String               @default("ACTIVE")
  
  // Supervisor and Role fields (using snake_case to match database)
  supervisorId        String?              @map("supervisor_id")
  supervisor          Employee?            @relation("EmployeeSupervisor", fields: [supervisorId], references: [id])
  subordinates        Employee[]           @relation("EmployeeSupervisor")
  isSupervisor        Boolean              @default(false) @map("is_supervisor")
  isReviewer          Boolean              @default(false) @map("is_reviewer")
  
  // Benefits fields (using snake_case to match database)
  medicalAid          Boolean              @default(false) @map("medical_aid")
  funeralCover        Boolean              @default(false) @map("funeral_cover")
  vehicleBenefit      Boolean              @default(false) @map("vehicle_benefit")
  fuelAllowance       Boolean              @default(false) @map("fuel_allowance")
  airtimeAllowance    Boolean              @default(false) @map("airtime_allowance")
  otherBenefits       String[]             @default([]) @map("other_benefits")
  
  // Archive fields (using snake_case to match database)
  archivedAt          DateTime?            @map("archived_at")
  archiveReason       String?              @map("archive_reason")
  accessRevoked       Boolean              @default(false) @map("access_revoked")
  
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hireDate            DateTime?
  departmentId        String?
  departmentRef       Department?          @relation(fields: [departmentId], references: [id])
  performanceReviews  PerformanceReview[]
  trainingAttendance  TrainingAttendance[]
  trainingEnrollments TrainingEnrollment[]

  @@index([employeeId])
  @@index([department])
  @@index([status])
  @@index([email])
  @@index([supervisorId])
  @@index([isSupervisor])
  @@index([isReviewer])
  @@index([archivedAt])
  @@map("employees")
}

model PerformanceReview {
  id             String    @id @default(cuid())
  employeeId     String
  reviewPeriod   String
  reviewType     String
  overallRating  Float?
  goals          Json?
  feedback       String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  employee       Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([reviewDate])
  @@map("performance_reviews")
}

model TrainingProgram {
  id                     String               @id @default(cuid())
  title                  String
  description            String?
  category               String
  duration               String
  format                 String
  capacity               Int?
  instructor             String?
  status                 String               @default("DRAFT")
  startDate              DateTime?
  endDate                DateTime?
  enrollmentDeadline     DateTime?
  certificationAvailable Boolean              @default(false)
  prerequisites          String?
  learningObjectives     Json?
  materials              Json?
  cost                   Float?               @default(0)
  currency               String?              @default("USD")
  location               String?
  onlineLink             String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  enrollments            TrainingEnrollment[]
  sessions               TrainingSession[]

  @@index([category])
  @@index([status])
  @@index([startDate])
  @@map("training_programs")
}

model TrainingEnrollment {
  id             String               @id @default(cuid())
  employeeId     String
  enrollmentDate DateTime             @default(now())
  completionDate DateTime?
  attendanceRate Float?
  createdAt      DateTime             @default(now())
  feedback       String?
  finalScore     Float?
  programId      String
  progress       Int                  @default(0)
  updatedAt      DateTime             @updatedAt
  status         String               @default("ENROLLED")
  certificate    TrainingCertificate?
  employee       Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  program        TrainingProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, employeeId])
  @@index([employeeId])
  @@index([status])
  @@map("training_enrollments")
}

model TrainingSession {
  id           String               @id @default(cuid())
  programId    String
  title        String
  description  String?
  sessionDate  DateTime
  startTime    String
  endTime      String
  instructor   String?
  location     String?
  onlineLink   String?
  materials    Json?
  maxAttendees Int?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  attendance   TrainingAttendance[]
  program      TrainingProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
  @@index([sessionDate])
  @@map("training_sessions")
}

model TrainingAttendance {
  id           String          @id @default(cuid())
  sessionId    String
  employeeId   String
  status       String
  checkInTime  DateTime?
  checkOutTime DateTime?
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  employee     Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  session      TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, employeeId])
  @@index([employeeId])
  @@map("training_attendance")
}

model TrainingCertificate {
  id                String             @id @default(cuid())
  enrollmentId      String             @unique
  certificateNumber String             @unique
  issuedDate        DateTime
  expiryDate        DateTime?
  isValid           Boolean            @default(true)
  downloadCount     Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  enrollment        TrainingEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([certificateNumber])
  @@index([issuedDate])
  @@map("training_certificates")
}

model Asset {
  id                 String              @id @default(cuid())
  assetTag           String              @unique
  name               String
  description        String?
  category           String
  brand              String?
  model              String?
  serialNumber       String?
  purchaseDate       DateTime?
  purchasePrice      Float?
  currentValue       Float?
  location           String?
  condition          AssetCondition      @default(GOOD)
  status             String              @default("ACTIVE")
  warrantyExpiry     DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auditRecords       AssetAudit[]
  maintenanceRecords MaintenanceRecord[]

  @@index([assetTag])
  @@index([category])
  @@index([status])
  @@index([location])
  @@map("assets")
}

model MaintenanceRecord {
  id              String    @id @default(cuid())
  assetId         String
  description     String?
  cost            Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  nextDueDate     DateTime?
  performedBy     String?
  performedDate   DateTime
  maintenanceType String
  asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([performedDate])
  @@map("maintenance_records")
}

model AssetAudit {
  id        String   @id @default(cuid())
  assetId   String
  auditDate DateTime
  condition String
  notes     String?
  auditedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([auditDate])
  @@map("asset_audits")
}

model Document {
  id             String            @id @default(cuid())
  mimeType       String
  category       DocumentCategory?
  description    String?
  version        String            @default("1.0")
  isPublic       Boolean           @default(false)
  uploadedBy     String?
  projectId      String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  accessLevel    String            @default("internal")
  extractedText  String?
  filename       String
  originalName   String
  path           String
  searchKeywords String[]          @default([])
  size           Int
  summary        String?
  url            String?
  tags           String[]          @default([])
  project        Project?          @relation(fields: [projectId], references: [id])

  @@index([category])
  @@index([uploadedBy])
  @@index([isPublic])
  @@map("documents")
}

model Event {
  id                   String              @id @default(cuid())
  title                String
  description          String?
  type                 String
  status               String              @default("planning")
  startDate            DateTime
  endDate              DateTime?
  location             String?
  venue                String?
  capacity             Int?
  agenda               Json?
  speakers             Json?
  budget               Float?
  actualCost           Float               @default(0)
  requiresRegistration Boolean             @default(false)
  registrationDeadline DateTime?
  partners             Json?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  registrations        EventRegistration[]

  @@index([type])
  @@index([status])
  @@index([startDate])
  @@map("events")
}

model EventRegistration {
  id                  String   @id @default(cuid())
  eventId             String
  participantName     String
  participantEmail    String
  participantPhone    String?
  organization        String?
  position            String?
  specialRequirements String?
  status              String   @default("pending")
  registeredAt        DateTime @default(now())
  updatedAt           DateTime @updatedAt
  event               Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantEmail])
  @@index([eventId])
  @@index([status])
  @@map("event_registrations")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  HR_MANAGER
  PROJECT_MANAGER
  CALL_CENTRE_AGENT
  EMPLOYEE
  USER
}

enum AuditLogSeverity {
  LOW
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CallType {
  INQUIRY
  COMPLAINT
  REQUEST
  EMERGENCY
  FEEDBACK
  OTHER
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum CallPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  SPAM
}

enum DocumentCategory {
  PROJECT
  HR
  FINANCE
  LEGAL
  TRAINING
  POLICY
  REPORT
  OTHER
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AssetCategory {
  COMPUTER
  FURNITURE
  VEHICLE
  EQUIPMENT
  OTHER
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  DISPOSED
  LOST
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

// =================================================================
// RBAC SYSTEM MODELS
// =================================================================

model SystemRole {
  id            String    @id @default(cuid())
  name          String    @unique
  displayName   String    @map("display_name")
  description   String?
  
  // Role Hierarchy
  level         Int       @default(1) // 1=Basic, 2=Advanced, 3=Admin, 4=System Admin
  parentRoleId  String?   @map("parent_role_id")
  parentRole    SystemRole? @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles    SystemRole[] @relation("RoleHierarchy")
  
  // Role Categorization
  category      String    // 'user', 'department', 'system'
  department    String?
  
  // Role Properties
  isSystemRole  Boolean   @default(false) @map("is_system_role")
  isActive      Boolean   @default(true) @map("is_active")
  maxUsers      Int?      @map("max_users")
  
  // Relationships
  permissions   RolePermission[]
  userAssignments UserRoleAssignment[]
  groupMemberships RoleGroupMembership[]
  
  // Audit Fields
  createdBy     String?   @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedBy     String?   @map("updated_by")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([level])
  @@index([category])
  @@index([department])
  @@index([isActive])
  @@map("system_roles")
}

model SystemPermission {
  id              String    @id @default(cuid())
  name            String    @unique
  displayName     String    @map("display_name")
  description     String?
  
  // Permission Categorization
  module          String    // 'hr', 'callcenter', 'programs', etc.
  category        String    // 'access', 'crud', 'admin'
  action          String    // 'view', 'create', 'edit', 'delete'
  
  // Permission Scope
  scope           String    @default("own") // 'own', 'team', 'department', 'organization'
  securityLevel   Int       @default(1) @map("security_level") // 1=Public, 2=Confidential, 3=Secret, 4=TopSecret
  
  // Permission Properties
  isSystemPermission Boolean @default(false) @map("is_system_permission")
  isActive           Boolean @default(true) @map("is_active")
  requiresApproval   Boolean @default(false) @map("requires_approval")
  
  // Relationships
  rolePermissions RolePermission[]
  
  // Audit Fields
  createdBy       String?   @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedBy       String?   @map("updated_by")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([module])
  @@index([category])
  @@index([action])
  @@index([scope])
  @@index([securityLevel])
  @@map("system_permissions")
}

model RolePermission {
  id           String    @id @default(cuid())
  roleId       String    @map("role_id")
  permissionId String    @map("permission_id")
  
  // Permission Customization
  isGranted    Boolean   @default(true) @map("is_granted")
  isInherited  Boolean   @default(false) @map("is_inherited")
  conditions   Json?     // Custom conditions for this permission
  
  // Relationships
  role         SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   SystemPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  // Audit Fields
  grantedBy    String?   @map("granted_by")
  grantedAt    DateTime  @default(now()) @map("granted_at")

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([isGranted])
  @@map("role_permissions")
}

model RoleGroup {
  id              String    @id @default(cuid())
  name            String    @unique
  displayName     String    @map("display_name")
  description     String?
  
  // Group Properties
  groupType       String    @default("custom") @map("group_type") // 'predefined', 'custom', 'department'
  department      String?
  isActive        Boolean   @default(true) @map("is_active")
  
  // Group Settings
  autoAssignRules Json?     @map("auto_assign_rules")
  maxMembers      Int?      @map("max_members")
  
  // Relationships
  roleMemberships RoleGroupMembership[]
  userAssignments UserRoleAssignment[]
  
  // Audit Fields
  createdBy       String?   @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedBy       String?   @map("updated_by")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([groupType])
  @@index([department])
  @@index([isActive])
  @@map("role_groups")
}

model RoleGroupMembership {
  id        String    @id @default(cuid())
  groupId   String    @map("group_id")
  roleId    String    @map("role_id")
  
  // Membership Properties
  isPrimary Boolean   @default(false) @map("is_primary")
  priority  Int       @default(1)
  
  // Relationships
  group     RoleGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role      SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  // Audit Fields
  addedBy   String?   @map("added_by")
  addedAt   DateTime  @default(now()) @map("added_at")

  @@unique([groupId, roleId])
  @@index([groupId])
  @@index([roleId])
  @@map("role_group_memberships")
}

model UserRoleAssignment {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  roleId         String?   @map("role_id")
  groupId        String?   @map("group_id")
  
  // Assignment Properties
  assignmentType String    @map("assignment_type") // 'direct', 'group', 'inherited'
  isActive       Boolean   @default(true) @map("is_active")
  isTemporary    Boolean   @default(false) @map("is_temporary")
  
  // Temporary Assignment
  validFrom      DateTime  @default(now()) @map("valid_from")
  validUntil     DateTime? @map("valid_until")
  
  // Assignment Context
  context        Json?     // Additional context for the assignment
  
  // Relationships
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           SystemRole? @relation(fields: [roleId], references: [id], onDelete: SetNull)
  group          RoleGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  
  // Audit Fields
  assignedBy     String?   @map("assigned_by")
  assignedAt     DateTime  @default(now()) @map("assigned_at")
  revokedBy      String?   @map("revoked_by")
  revokedAt      DateTime? @map("revoked_at")

  @@index([userId])
  @@index([roleId])
  @@index([groupId])
  @@index([isActive])
  @@index([assignmentType])
  @@index([validFrom, validUntil])
  @@map("user_role_assignments")
}

// Risk Management Models
model Risk {
  id                String    @id @default(cuid())
  title             String
  description       String
  category          String    // 'Operational', 'Strategic', 'Financial', 'Compliance', 'Reputational', 'Environmental', 'Cybersecurity', 'HR/Personnel'
  department        String
  probability       String    // 'Low', 'Medium', 'High'
  impact            String    // 'Low', 'Medium', 'High'
  riskScore         Int       // Calculated from probability * impact
  status            String    @default("Open") // 'Open', 'Mitigated', 'Escalated', 'Closed'
  dateIdentified    DateTime  @default(now()) @map("date_identified")
  owner             String
  mitigationPlan    String?   @map("mitigation_plan")
  documents         String[]  @default([])
  lastReviewed      DateTime? @map("last_reviewed")
  createdBy         String    @map("created_by")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@index([category])
  @@index([department])
  @@index([status])
  @@index([riskScore])
  @@index([dateIdentified])
  @@map("risks")
}
