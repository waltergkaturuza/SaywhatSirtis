// SIRTIS Database Schema
// SAYWHAT Integrated Real-Time Information System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================================
// USER MANAGEMENT & AUTHENTICATION
// =============================================

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  username          String?             @unique
  firstName         String
  lastName          String
  phone             String?
  profileImage      String?
  department        String
  position          String
  employeeId        String?             @unique
  isActive          Boolean             @default(true)
  lastLogin         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Authentication
  hashedPassword    String
  emailVerified     DateTime?
  biometricEnabled  Boolean             @default(false)
  mfaEnabled        Boolean             @default(false)
  mfaSecret         String?
  
  // Role-based access control
  roles             UserRole[]
  permissions       UserPermission[]
  
  // Relationships
  accounts          Account[]
  sessions          Session[]
  performancePlans  PerformancePlan[]
  performanceAppraisals PerformanceAppraisal[]
  calls             Call[]
  projects          ProjectAssignment[]
  auditLogs         AuditLog[]
  
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String      // JSON string of permission array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userRoles   UserRole[]
  
  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserPermission {
  id         String @id @default(cuid())
  userId     String
  permission String
  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permission])
  @@map("user_permissions")
}

// NextAuth.js tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// =============================================
// PROGRAMS MANAGEMENT
// =============================================

model Project {
  id               String              @id @default(cuid())
  name             String
  description      String?
  timeframe        String
  startDate        DateTime
  endDate          DateTime
  country          String
  province         String?
  objectives       String      // JSON string of objectives array
  status           ProjectStatus       @default(PLANNING)
  budget           Decimal?
  actualSpent      Decimal?            @default(0)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  // Relationships
  indicators       ProjectIndicator[]
  assignments      ProjectAssignment[]
  progressReports  ProjectProgress[]
  documents        ProjectDocument[]
  
  @@map("projects")
}

model ProjectIndicator {
  id          String            @id @default(cuid())
  projectId   String
  name        String
  target      String
  measurement String
  comment     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  progress    IndicatorProgress[]
  
  @@map("project_indicators")
}

model IndicatorProgress {
  id          String           @id @default(cuid())
  indicatorId String
  value       String
  reportDate  DateTime
  comment     String?
  reportedBy  String
  
  indicator   ProjectIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  
  @@map("indicator_progress")
}

model ProjectAssignment {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   // M&E, CAM, Research Unit, etc.
  createdAt DateTime @default(now())
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_assignments")
}

model ProjectProgress {
  id          String   @id @default(cuid())
  projectId   String
  reportDate  DateTime
  narrative   String
  challenges  String?
  achievements String?
  nextSteps   String?
  reportedBy  String
  createdAt   DateTime @default(now())
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_progress")
}

model ProjectDocument {
  id          String      @id @default(cuid())
  projectId   String
  fileName    String
  fileSize    Int
  fileType    String
  filePath    String
  uploadedBy  String
  uploadedAt  DateTime    @default(now())
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_documents")
}

// =============================================
// CALL CENTRE MANAGEMENT
// =============================================

model Call {
  id               String            @id @default(cuid())
  callNumber       String            @unique
  officerId        String
  callerPhone      String
  callerName       String?
  callerAge        AgeGroup?
  gender           Gender?
  province         Province?
  address          String?
  language         Language?
  
  // Call details
  mode             CommunicationMode
  howHeardAboutUs  String?
  isValid          Boolean           @default(true)
  isRepeatCall     Boolean           @default(false)
  callDescription  String
  purpose          CallPurpose
  
  // Case management
  isCase           Boolean           @default(false)
  caseNumber       String?           @unique
  perpetrator      String?
  servicesRecommended String?
  referral         String?
  clientName       String?
  clientAge        String?
  clientSex        String?
  comment          String?
  
  // Status and dates
  status           CallStatus        @default(OPEN)
  dueDate          DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  officer          User              @relation(fields: [officerId], references: [id])
  
  @@map("calls")
}

// =============================================
// HUMAN RESOURCES MANAGEMENT
// =============================================

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("departments")
}

model PerformancePlan {
  id               String              @id @default(cuid())
  employeeId       String
  year             Int
  keyDeliverables  PerformanceDeliverable[]
  status           PlanStatus          @default(DRAFT)
  submittedAt      DateTime?
  approvedAt       DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  employee         User                @relation(fields: [employeeId], references: [id])
  appraisals       PerformanceAppraisal[]
  
  @@unique([employeeId, year])
  @@map("performance_plans")
}

model PerformanceDeliverable {
  id               String           @id @default(cuid())
  planId           String
  keyDeliverable   String
  activity         String
  timeline         String
  successIndicator String
  supportDepartment String?
  
  plan             PerformancePlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  progress         DeliverableProgress[]
  
  @@map("performance_deliverables")
}

model DeliverableProgress {
  id             String                @id @default(cuid())
  deliverableId  String
  progress       String
  updateDate     DateTime
  comment        String?
  
  deliverable    PerformanceDeliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
  
  @@map("deliverable_progress")
}

model PerformanceAppraisal {
  id               String          @id @default(cuid())
  planId           String
  employeeId       String
  period           String          // Q1, Q2, Q3, Annual
  overallRating    Rating?
  strengths        String?
  areasImprovement String?
  goals            String?
  status           AppraisalStatus @default(PENDING)
  submittedAt      DateTime?
  reviewedAt       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  plan             PerformancePlan @relation(fields: [planId], references: [id])
  employee         User            @relation(fields: [employeeId], references: [id])
  
  @@map("performance_appraisals")
}

// =============================================
// INVENTORY & ASSET MANAGEMENT
// =============================================

model Asset {
  id               String        @id @default(cuid())
  assetNumber      String        @unique
  assetType        String
  name             String
  model            String?
  procurementValue Decimal
  depreciationRate Decimal       @default(0)
  currentValue     Decimal
  allocation       String
  location         String
  condition        AssetCondition @default(GOOD)
  status           AssetStatus   @default(ACTIVE)
  procurementDate  DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  maintenances     AssetMaintenance[]
  
  @@map("assets")
}

model AssetMaintenance {
  id               String            @id @default(cuid())
  assetId          String
  maintenanceType  MaintenanceType
  description      String
  cost             Decimal?
  scheduledDate    DateTime
  completedDate    DateTime?
  performedBy      String?
  status           MaintenanceStatus @default(SCHEDULED)
  createdAt        DateTime          @default(now())
  
  asset            Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@map("asset_maintenance")
}

// =============================================
// DOCUMENT REPOSITORY
// =============================================

model Document {
  id               String       @id @default(cuid())
  title            String
  fileName         String
  fileSize         Int
  fileType         String
  filePath         String
  category         DocumentCategory
  description      String?
  tags             String         // JSON string array
  keywords         String         // AI-generated keywords as JSON string array
  summary          String?      // AI-generated summary
  uploadedBy       String
  isPublic         Boolean      @default(false)
  downloadCount    Int          @default(0)
  uploadedAt       DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@map("documents")
}

// =============================================
// FEEDBACK & SENTIMENT ANALYSIS
// =============================================

model Feedback {
  id               String         @id @default(cuid())
  source           FeedbackSource
  content          String
  sentiment        SentimentType?
  sentimentScore   Float?
  category         String?
  isAnonymous      Boolean        @default(false)
  contactInfo      String?
  status           FeedbackStatus @default(PENDING)
  response         String?
  respondedBy      String?
  respondedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  @@map("feedback")
}

// =============================================
// SYSTEM AUDIT & LOGGING
// =============================================

model AuditLog {
  id           String    @id @default(cuid())
  userId       String?
  action       String
  resource     String
  resourceId   String?
  oldValues    Json?
  newValues    Json?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime  @default(now())
  
  user         User?     @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

// =============================================
// RECRUITMENT MANAGEMENT
// =============================================

model JobPosting {
  id               String           @id @default(cuid())
  title            String
  department       String
  location         String
  type             JobType          @default(FULL_TIME)
  level            JobLevel         @default(MID)
  status           JobStatus        @default(DRAFT)
  description      String?
  requirements     String           // JSON string of requirements array
  responsibilities String           // JSON string of responsibilities array
  salaryMin        Decimal?
  salaryMax        Decimal?
  currency         String           @default("USD")
  benefits         String           // JSON string of benefits array
  applicationCount Int              @default(0)
  postedDate       DateTime?
  closingDate      DateTime?
  createdBy        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relationships
  applications     Application[]
  
  @@map("job_postings")
}

model Application {
  id              String             @id @default(cuid())
  jobId           String
  candidateName   String
  email           String
  phone           String?
  status          ApplicationStatus  @default(SUBMITTED)
  resumeUrl       String?
  coverLetter     String?
  appliedDate     DateTime           @default(now())
  lastUpdated     DateTime           @updatedAt
  notes           String?
  score           Int?
  
  // Relationships
  job             JobPosting         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@map("applications")
}

// Recruitment Enums
enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
}

enum JobLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
  ON_HOLD
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  OFFERED
  HIRED
  REJECTED
}

// =============================================
// ENUMS
// =============================================

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NA
}

enum Province {
  HARARE
  BULAWAYO
  MANICALAND
  MASHONALAND_CENTRAL
  MASHONALAND_EAST
  MASHONALAND_WEST
  MASVINGO
  MATABELELAND_NORTH
  MATABELELAND_SOUTH
  MIDLANDS
  NA
}

enum AgeGroup {
  UNDER_14
  FIFTEEN_TO_19
  TWENTY_TO_24
  TWENTY_FIVE_PLUS
}

enum Language {
  SHONA
  ENGLISH
  NDEBELE
  NA
}

enum CommunicationMode {
  INBOUND
  OUTBOUND
  WHATSAPP
  WALK_IN
  TEXT
}

enum CallPurpose {
  ARV_THERAPY
  CANCER_SCREENING
  CHILD_PROTECTION
  CONTRACEPTION
  DSA
  DROPPED_CALL
  GBV
  HIV
  INFO_COUNSELLING
  LEGAL_ASSISTANCE
  MEDICAL_ASSISTANCE
  MHM
  MENTAL_HEALTH
  PRANK_CALL
  PREP_PEP
  PRE_POST_NATAL_CARE
  RELATIONSHIP_ISSUES
  REPRODUCTIVE_DISORDERS
  PAC
  STIS
  SEXUAL_HARASSMENT
  TB
  TEST_CALL
  OTHER
}

enum CallStatus {
  OPEN
  IN_PROGRESS
  PENDING
  CLOSED
  OVERDUE
}

enum PlanStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum AppraisalStatus {
  PENDING
  IN_REVIEW
  COMPLETED
  OVERDUE
}

enum Rating {
  EXCELLENT
  SATISFACTORY
  NEEDS_IMPROVEMENT
  UNSATISFACTORY
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  DISPOSED
  UNDER_MAINTENANCE
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  UPGRADE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentCategory {
  FLAGSHIP_EVENTS
  DONOR_REPORTS
  ANNUAL_REPORTS
  POLICIES
  NEWSLETTERS
  RESEARCH_BOOKS
  RESEARCH_PAPERS
  PROJECT_PROPOSALS
  FINANCIAL_REPORTS
  AUDIT_REPORTS
  OTHER
}

enum FeedbackSource {
  SURVEY
  SOCIAL_MEDIA
  WHATSAPP
  SUGGESTION_BOX
  GRIEVANCE
  OTHER
}

enum SentimentType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum FeedbackStatus {
  PENDING
  REVIEWED
  RESPONDED
  RESOLVED
  ARCHIVED
}
